(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/BehaviorSubject'), require('rxjs/operators/filter'), require('@angular/core'), require('@angular/platform-browser'), require('rxjs/operators/map'), require('@angular/common'), require('rxjs/operators/tap'), require('rxjs/observable/fromEvent'), require('rxjs/operators/debounceTime'), require('rxjs/Subject'), require('rxjs/operators/switchMap'), require('rxjs/observable/zip')) :
    typeof define === 'function' && define.amd ? define('@ngx-gallery/core', ['exports', 'rxjs/BehaviorSubject', 'rxjs/operators/filter', '@angular/core', '@angular/platform-browser', 'rxjs/operators/map', '@angular/common', 'rxjs/operators/tap', 'rxjs/observable/fromEvent', 'rxjs/operators/debounceTime', 'rxjs/Subject', 'rxjs/operators/switchMap', 'rxjs/observable/zip'], factory) :
    (factory((global['ngx-gallery'] = global['ngx-gallery'] || {}, global['ngx-gallery'].core = {}),global.rxjs.BehaviorSubject,global.rxjs['operators/filter'],global.ng.core,global.ng.platformBrowser,global.rxjs['operators/map'],global.ng.common,global.rxjs['operators/tap'],global.rxjs['observable/fromEvent'],global.rxjs['operators/debounceTime'],global.rxjs.Subject,global.rxjs['operators/switchMap'],global.rxjs['observable/zip']));
}(this, (function (exports,BehaviorSubject,filter,core,platformBrowser,map,common,tap,fromEvent,debounceTime,Subject,switchMap,zip) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var GalleryAction = {
        INITIALIZED: 'initialized',
        ITEMS_CHANGED: 'itemsChanged',
        INDEX_CHANGED: 'indexChanged',
        OPENED: 'opened',
        CLOSED: 'closed',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Initial state
     */
    var /** @type {?} */ defaultState = {
        action: GalleryAction.INITIALIZED,
        currIndex: 0,
        hasNext: false,
        hasPrev: false,
        items: []
    };
    var /** @type {?} */ defaultConfig = {
        gestures: true,
        panSensitivity: 25,
        counter: true,
        nav: true,
        dots: false,
        thumb: true,
        thumbWidth: 120,
        thumbHeight: 90,
        thumbPosition: 'bottom',
        disableThumb: false,
        slidingDirection: 'horizontal',
        zoomOut: 0,
        loadingIcon: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg stroke=\"#fff\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\">\n<circle cx=\"22\" cy=\"22\" r=\"1\">\n<animate attributeName=\"r\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/>\n<animate attributeName=\"stroke-opacity\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/>\n</circle>\n<circle cx=\"22\" cy=\"22\" r=\"1\">\n<animate attributeName=\"r\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/>\n<animate attributeName=\"stroke-opacity\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/>\n</circle>\n</g>\n</svg>"
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryRef = (function () {
        function GalleryRef(config, state) {
            if (config === void 0) {
                config = defaultConfig;
            }
            if (state === void 0) {
                state = defaultState;
            }
            this.config = config;
            this.state = state;
            this.state$ = new BehaviorSubject.BehaviorSubject(state);
            this.config$ = new BehaviorSubject.BehaviorSubject(defaultConfig);
            this.setConfig(config);
        }
        /**
         * Set gallery config
         * @param config
         */
        /**
         * Set gallery config
         * @param {?} config
         * @return {?}
         */
        GalleryRef.prototype.setConfig = /**
         * Set gallery config
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.config = __assign({}, defaultConfig, this.config, config);
                this.config$.next(this.config);
            };
        /**
         * Set gallery state
         * @param state
         */
        /**
         * Set gallery state
         * @param {?} state
         * @return {?}
         */
        GalleryRef.prototype.setState = /**
         * Set gallery state
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this.state = __assign({}, this.state, state);
                this.state$.next(this.state);
            };
        /** Add gallery item
         * @param item - Gallery item object
         * @param active - Set the new item as current slide
         */
        /**
         * Add gallery item
         * @param {?} item - Gallery item object
         * @param {?=} active - Set the new item as current slide
         * @return {?}
         */
        GalleryRef.prototype.add = /**
         * Add gallery item
         * @param {?} item - Gallery item object
         * @param {?=} active - Set the new item as current slide
         * @return {?}
         */
            function (item, active) {
                var /** @type {?} */ items = __spread(this.state.items, [item]);
                this.setState({
                    action: GalleryAction.ITEMS_CHANGED,
                    items: items,
                    hasNext: items.length > 1,
                    currIndex: active ? items.length - 1 : this.state.currIndex
                });
            };
        /** Remove gallery item
         * @param i - Item index
         */
        /**
         * Remove gallery item
         * @param {?} i - Item index
         * @return {?}
         */
        GalleryRef.prototype.remove = /**
         * Remove gallery item
         * @param {?} i - Item index
         * @return {?}
         */
            function (i) {
                var /** @type {?} */ items = __spread(this.state.items.slice(0, i), this.state.items.slice(i + 1, this.state.items.length));
                this.setState({
                    action: GalleryAction.ITEMS_CHANGED,
                    items: items,
                    hasNext: items.length > 1,
                    hasPrev: i > 0
                });
            };
        /**
         * Load items and reset the state
         * @param items - Gallery images data
         */
        /**
         * Load items and reset the state
         * @param {?} items - Gallery images data
         * @return {?}
         */
        GalleryRef.prototype.load = /**
         * Load items and reset the state
         * @param {?} items - Gallery images data
         * @return {?}
         */
            function (items) {
                if (items) {
                    this.setState({
                        action: GalleryAction.ITEMS_CHANGED,
                        items: items,
                        hasNext: items.length > 1,
                        hasPrev: false
                    });
                }
            };
        /**
         * Set active item
         * @param i - Active Index
         * @param action - Action type
         */
        /**
         * Set active item
         * @param {?} i - Active Index
         * @return {?}
         */
        GalleryRef.prototype.set = /**
         * Set active item
         * @param {?} i - Active Index
         * @return {?}
         */
            function (i) {
                if (i !== this.state.currIndex) {
                    this.setState({
                        action: GalleryAction.INDEX_CHANGED,
                        currIndex: i,
                        hasNext: i < this.state.items.length - 1,
                        hasPrev: i > 0
                    });
                }
            };
        /**
         * Next item
         */
        /**
         * Next item
         * @return {?}
         */
        GalleryRef.prototype.next = /**
         * Next item
         * @return {?}
         */
            function () {
                if (this.state.hasNext) {
                    this.set(this.state.currIndex + 1);
                }
                else if (this.config.loop) {
                    this.set(0);
                }
            };
        /**
         * Prev item
         */
        /**
         * Prev item
         * @return {?}
         */
        GalleryRef.prototype.prev = /**
         * Prev item
         * @return {?}
         */
            function () {
                if (this.state.hasPrev) {
                    this.set(this.state.currIndex - 1);
                }
                else if (this.config.loop) {
                    this.set(this.state.items.length - 1);
                }
            };
        /**
         * Reset gallery to initial state
         */
        /**
         * Reset gallery to initial state
         * @return {?}
         */
        GalleryRef.prototype.reset = /**
         * Reset gallery to initial state
         * @return {?}
         */
            function () {
                this.setState(defaultState);
            };
        /**
         * Destroy GalleryRef (for internal use only)
         */
        /**
         * Destroy GalleryRef (for internal use only)
         * @return {?}
         */
        GalleryRef.prototype.destroy = /**
         * Destroy GalleryRef (for internal use only)
         * @return {?}
         */
            function () {
                this.state$.complete();
                this.config$.complete();
            };
        /** Gallery Events */
        /**
         * Stream that emits when gallery is initialized/reset
         */
        /**
         * Stream that emits when gallery is initialized/reset
         * @return {?}
         */
        GalleryRef.prototype.initialized = /**
         * Stream that emits when gallery is initialized/reset
         * @return {?}
         */
            function () {
                return this.state$.pipe(filter.filter(function (state) { return state.action === GalleryAction.INITIALIZED; }));
            };
        /**
         * Stream that emits when items is changed (items loaded, item added, item removed)
         */
        /**
         * Stream that emits when items is changed (items loaded, item added, item removed)
         * @return {?}
         */
        GalleryRef.prototype.itemsChanged = /**
         * Stream that emits when items is changed (items loaded, item added, item removed)
         * @return {?}
         */
            function () {
                return this.state$.pipe(filter.filter(function (state) { return state.action === GalleryAction.ITEMS_CHANGED; }));
            };
        /**
         * Stream that emits when current item is changed
         */
        /**
         * Stream that emits when current item is changed
         * @return {?}
         */
        GalleryRef.prototype.indexChanged = /**
         * Stream that emits when current item is changed
         * @return {?}
         */
            function () {
                return this.state$.pipe(filter.filter(function (state) { return state.action === GalleryAction.INDEX_CHANGED; }));
            };
        return GalleryRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ GALLERY_CONFIG = new core.InjectionToken('galleryConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Gallery = (function () {
        function Gallery(config) {
            /**
             * Stores GalleryRef instances
             */
            this._instances = {};
            this.config = __assign({}, defaultConfig, config);
        }
        /**
         * Returns Gallery by ID
         */
        /**
         * Returns Gallery by ID
         * @param {?=} id
         * @param {?=} config
         * @return {?}
         */
        Gallery.prototype.ref = /**
         * Returns Gallery by ID
         * @param {?=} id
         * @param {?=} config
         * @return {?}
         */
            function (id, config) {
                if (id === void 0) {
                    id = 'root';
                }
                if (this._instances[id] instanceof GalleryRef) {
                    return this._instances[id];
                }
                else {
                    config = __assign({}, this.config, config);
                    return this._instances[id] = new GalleryRef(config);
                }
            };
        /**
         * @param {?=} id
         * @return {?}
         */
        Gallery.prototype.destroy = /**
         * @param {?=} id
         * @return {?}
         */
            function (id) {
                if (id === void 0) {
                    id = 'root';
                }
                if (this._instances[id] instanceof GalleryRef) {
                    this._instances[id].destroy();
                    this._instances[id] = null;
                }
            };
        /**
         * @return {?}
         */
        Gallery.prototype.destroyAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                Object.keys(this._instances)
                    .map(function (key) {
                    _this._instances[key].destory();
                    _this._instances[key] = null;
                });
            };
        /**
         * @return {?}
         */
        Gallery.prototype.resetAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                Object.keys(this._instances)
                    .map(function (id) {
                    if (id === void 0) {
                        id = 'root';
                    }
                    return _this._instances[id].gallery;
                })
                    .map(function (gallery) { return gallery.reset(); });
            };
        Gallery.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        Gallery.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [GALLERY_CONFIG,] },] },
            ];
        };
        return Gallery;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ImageItemComponent = (function () {
        function ImageItemComponent(gallery, sanitizer) {
            this.gallery = gallery;
            this.sanitizer = sanitizer;
        }
        ImageItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'image-item',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <div [lazyImage]=\"data?.src\" (loading)=\"loading = $event\"></div>\n    <i class=\"g-loading\" *ngIf=\"loading\" [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(gallery.config.loadingIcon)\"></i>\n  ",
                        styles: ["\n    :host {\n      position: relative;\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      background-position: center center;\n      background-size: cover;\n      width: 100%;\n      height: 100%;\n    }\n  "],
                    },] },
        ];
        /** @nocollapse */
        ImageItemComponent.ctorParameters = function () {
            return [
                { type: Gallery, },
                { type: platformBrowser.DomSanitizer, },
            ];
        };
        ImageItemComponent.propDecorators = {
            "data": [{ type: core.Input },],
        };
        return ImageItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var VideoItemComponent = (function () {
        function VideoItemComponent(sanitizer) {
            this.sanitizer = sanitizer;
        }
        VideoItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'video-item',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <video controls\n           [src]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.src)\"\n           [poster]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.poster)\"></video>\n  ",
                        styles: ["\n    video {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
                    },] },
        ];
        /** @nocollapse */
        VideoItemComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer, },
            ];
        };
        VideoItemComponent.propDecorators = {
            "data": [{ type: core.Input },],
        };
        return VideoItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IframeItemComponent = (function () {
        function IframeItemComponent(sanitizer) {
            this.sanitizer = sanitizer;
        }
        IframeItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'iframe-item',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <iframe frameborder=\"0\"\n            allowfullscreen\n            [src]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.src)\"></iframe>\n  ",
                        styles: ["\n    iframe {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
                    },] },
        ];
        /** @nocollapse */
        IframeItemComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer, },
            ];
        };
        IframeItemComponent.propDecorators = {
            "data": [{ type: core.Input },],
        };
        return IframeItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ThumbnailItemComponent = (function () {
        function ThumbnailItemComponent() {
        }
        ThumbnailItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thumbnail-item',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <div [lazyImage]=\"data.thumb\"></div>\n  ",
                        styles: ["\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      width: 100%;\n      height: 100%;\n      background-size: cover;\n      background-position: center center;\n    }\n  "]
                    },] },
        ];
        /** @nocollapse */
        ThumbnailItemComponent.ctorParameters = function () { return []; };
        ThumbnailItemComponent.propDecorators = {
            "data": [{ type: core.Input },],
        };
        return ThumbnailItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ImageItem = (function () {
        function ImageItem(src, thumb) {
            this.component = ImageItemComponent;
            this.thumbComponent = ThumbnailItemComponent;
            this.data = { src: src, thumb: thumb };
        }
        return ImageItem;
    }());
    var VideoItem = (function () {
        function VideoItem(src, thumb, poster) {
            this.component = VideoItemComponent;
            this.thumbComponent = ThumbnailItemComponent;
            this.data = { src: src, thumb: thumb, poster: poster };
        }
        return VideoItem;
    }());
    var IframeItem = (function () {
        function IframeItem(src, thumb) {
            this.component = IframeItemComponent;
            this.thumbComponent = ThumbnailItemComponent;
            this.data = { src: src, thumb: thumb };
        }
        return IframeItem;
    }());
    var YoutubeItem = (function () {
        function YoutubeItem(src, thumb) {
            this.component = IframeItemComponent;
            this.thumbComponent = ThumbnailItemComponent;
            this.data = {
                src: "//youtube.com/embed/" + src + "?wmode=transparent",
                thumb: thumb ? thumb : "//img.youtube.com/vi/" + src + "/default.jpg"
            };
        }
        return YoutubeItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryComponent = (function () {
        function GalleryComponent(_gallery) {
            this._gallery = _gallery;
            this.gestures = this._gallery.config.gestures;
            this.panSensitivity = this._gallery.config.panSensitivity;
            this.zoomOut = this._gallery.config.zoomOut;
            this.dots = this._gallery.config.dots;
            this.thumb = this._gallery.config.thumb;
            this.nav = this._gallery.config.nav;
            this.counter = this._gallery.config.counter;
            this.thumbWidth = this._gallery.config.thumbWidth;
            this.thumbHeight = this._gallery.config.thumbHeight;
            this.disableThumb = this._gallery.config.disableThumb;
            this.thumbPosition = this._gallery.config.thumbPosition;
            this.slidingDirection = this._gallery.config.slidingDirection;
            this.destroyRef = true;
            this.indexChange = new core.EventEmitter();
            this.itemsChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        GalleryComponent.prototype.getConfig = /**
         * @return {?}
         */
            function () {
                return {
                    gestures: this.gestures,
                    panSensitivity: this.panSensitivity,
                    zoomOut: this.zoomOut,
                    counter: this.counter,
                    nav: this.nav,
                    dots: this.dots,
                    thumb: this.thumb,
                    thumbWidth: this.thumbWidth,
                    thumbHeight: this.thumbHeight,
                    thumbPosition: this.thumbPosition,
                    disableThumb: this.disableThumb,
                    slidingDirection: this.slidingDirection
                };
            };
        /**
         * @param {?} i
         * @return {?}
         */
        GalleryComponent.prototype.onIndexChange = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                switch (i) {
                    case 'next':
                        this.galleryRef.next();
                        break;
                    case 'prev':
                        this.galleryRef.prev();
                        break;
                    default:
                        this.galleryRef.set(i);
                }
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.galleryRef instanceof GalleryRef) {
                    this.galleryRef.setConfig(this.getConfig());
                    if (this.items !== this.galleryRef.state.items) {
                        this.load(this.items);
                    }
                }
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Get gallery instance by id
                this.galleryRef = this._gallery.ref(this.id);
                this.galleryRef.setConfig(this.getConfig());
                this.load(this.items);
                /** Subscribes to indexChange and itemsChange events when user bind them */
                if (this.indexChange.observers.length) {
                    this._indexChange$ = this.galleryRef.indexChanged().subscribe(function (e) { return _this.indexChange.next(e); });
                }
                if (this.itemsChange.observers.length) {
                    this._itemChange$ = this.galleryRef.itemsChanged().subscribe(function (e) { return _this.itemsChange.next(e); });
                }
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._indexChange$) {
                    this._indexChange$.unsubscribe();
                }
                if (this._itemChange$) {
                    this._itemChange$.unsubscribe();
                }
                if (this.destroyRef) {
                    this.galleryRef.reset();
                }
            };
        /**
         * @param {?} items
         * @return {?}
         */
        GalleryComponent.prototype.load = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                this.galleryRef.load(items);
            };
        /**
         * @param {?} item
         * @param {?=} active
         * @return {?}
         */
        GalleryComponent.prototype.add = /**
         * @param {?} item
         * @param {?=} active
         * @return {?}
         */
            function (item, active) {
                this.galleryRef.add(item, active);
            };
        /**
         * @param {?} i
         * @return {?}
         */
        GalleryComponent.prototype.remove = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                this.galleryRef.remove(i);
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                this.galleryRef.next();
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.prev = /**
         * @return {?}
         */
            function () {
                this.galleryRef.prev();
            };
        /**
         * @param {?} i
         * @return {?}
         */
        GalleryComponent.prototype.set = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                this.galleryRef.set(i);
            };
        /**
         * @return {?}
         */
        GalleryComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.galleryRef.reset();
            };
        GalleryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <gallery-core [state]=\"galleryRef.state$ | async\"\n                  [config]=\"galleryRef.config$ | async\"\n                  (indexChange)=\"onIndexChange($event)\"></gallery-core>\n    <ng-content></ng-content>\n  "
                    },] },
        ];
        /** @nocollapse */
        GalleryComponent.ctorParameters = function () {
            return [
                { type: Gallery, },
            ];
        };
        GalleryComponent.propDecorators = {
            "id": [{ type: core.Input },],
            "items": [{ type: core.Input },],
            "gestures": [{ type: core.Input },],
            "panSensitivity": [{ type: core.Input },],
            "zoomOut": [{ type: core.Input },],
            "dots": [{ type: core.Input },],
            "thumb": [{ type: core.Input },],
            "nav": [{ type: core.Input },],
            "counter": [{ type: core.Input },],
            "thumbWidth": [{ type: core.Input },],
            "thumbHeight": [{ type: core.Input },],
            "disableThumb": [{ type: core.Input },],
            "thumbPosition": [{ type: core.Input },],
            "slidingDirection": [{ type: core.Input },],
            "destroyRef": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
            "itemsChange": [{ type: core.Output },],
        };
        return GalleryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryCoreComponent = (function () {
        function GalleryCoreComponent() {
            this.indexChange = new core.EventEmitter();
        }
        Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
            get: /**
             * Set thumbnails position ('top' | 'left' | 'right' | 'bottom')
             * @return {?}
             */ function () {
                return this.config.thumbPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
            get: /**
             * Set thumbnails position ('horizontal' | 'vertical')
             * @return {?}
             */ function () {
                return this.config.slidingDirection;
            },
            enumerable: true,
            configurable: true
        });
        GalleryCoreComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-core',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <gallery-thumb *ngIf=\"config.thumb\"\n                  [state]=\"state\"\n                  [config]=\"config\"\n                  (indexChange)=\"indexChange.emit($event)\">\n    </gallery-thumb>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (indexChange)=\"indexChange.emit($event)\">\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (indexChange)=\"indexChange.emit($event)\">\n        </gallery-nav>\n      </gallery-slider>\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (indexChange)=\"indexChange.emit($event)\">\n      </gallery-dots>\n      <gallery-counter *ngIf=\"config.counter\"\n                      [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        GalleryCoreComponent.ctorParameters = function () { return []; };
        GalleryCoreComponent.propDecorators = {
            "state": [{ type: core.Input },],
            "config": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
            "thumbPosition": [{ type: core.HostBinding, args: ['attr.thumbPosition',] },],
            "slidingDirection": [{ type: core.HostBinding, args: ['attr.slidingDirection',] },],
        };
        return GalleryCoreComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryNavComponent = (function () {
        function GalleryNavComponent() {
            this.indexChange = new core.EventEmitter();
        }
        GalleryNavComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-nav',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <i *ngIf=\"config.loop || state.hasPrev\" class=\"g-nav-prev\" (tapClick)=\"indexChange.emit('prev')\"></i>\n    <i *ngIf=\"config.loop || state.hasNext\" class=\"g-nav-next\" (tapClick)=\"indexChange.emit('next')\"></i>\n  "
                    },] },
        ];
        /** @nocollapse */
        GalleryNavComponent.ctorParameters = function () { return []; };
        GalleryNavComponent.propDecorators = {
            "state": [{ type: core.Input },],
            "config": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
        };
        return GalleryNavComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryThumbComponent = (function () {
        function GalleryThumbComponent(_el) {
            var _this = this;
            this._el = _el;
            this.stateStream$ = new BehaviorSubject.BehaviorSubject({ value: 0, active: false });
            this.indexChange = new core.EventEmitter();
            this.thumbState$ = this.stateStream$.pipe(map.map(function (state) {
                return ({
                    style: _this.thumbsStyle(state.value),
                    active: state.active
                });
            }));
        }
        /**
         * @return {?}
         */
        GalleryThumbComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.stateStream$.next({ value: 0, active: false });
            };
        /**
         * @return {?}
         */
        GalleryThumbComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
                    this.mc = new Hammer(this._el.nativeElement);
                    this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
                    // Slides thumbnails
                    this.mc.on('pan', function (e) {
                        switch (_this.config.thumbPosition) {
                            case 'right':
                            case 'left':
                                _this.stateStream$.next({ value: e.deltaY, active: true });
                                if (e.isFinal) {
                                    _this.stateStream$.next({ value: 0, active: false });
                                    _this.verticalPan(e);
                                }
                                break;
                            case 'top':
                            case 'bottom':
                                _this.stateStream$.next({ value: e.deltaX, active: true });
                                if (e.isFinal) {
                                    _this.stateStream$.next({ value: 0, active: false });
                                    _this.horizontalPan(e);
                                }
                        }
                    });
                }
            };
        /**
         * @return {?}
         */
        GalleryThumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.mc) {
                    this.mc.destroy();
                }
            };
        /**
         * @param {?} delta
         * @return {?}
         */
        GalleryThumbComponent.prototype.thumbsStyle = /**
         * @param {?} delta
         * @return {?}
         */
            function (delta) {
                var /** @type {?} */ value;
                switch (this.config.thumbPosition) {
                    case 'top':
                    case 'bottom':
                        this.height = this.config.thumbHeight + 'px';
                        value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - delta);
                        return {
                            transform: "translate3d(" + value + "px, 0, 0)",
                            width: this.state.items.length * this.config.thumbWidth + 'px',
                            height: '100%'
                        };
                    case 'left':
                    case 'right':
                        this.width = this.config.thumbWidth + 'px';
                        value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - delta);
                        return {
                            transform: "translate3d(0, " + value + "px, 0)",
                            width: '100%',
                            height: this.state.items.length * this.config.thumbHeight + 'px',
                        };
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GalleryThumbComponent.prototype.verticalPan = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.velocityY > 0.3) {
                    this.indexChange.emit('prev');
                }
                else if (e.velocityY < -0.3) {
                    this.indexChange.emit('next');
                }
                else {
                    if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('next');
                    }
                    else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('prev');
                    }
                    else {
                        this.indexChange.emit(this.state.currIndex);
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GalleryThumbComponent.prototype.horizontalPan = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.velocityX > 0.3) {
                    this.indexChange.emit('prev');
                }
                else if (e.velocityX < -0.3) {
                    this.indexChange.emit('next');
                }
                else {
                    if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('next');
                    }
                    else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('prev');
                    }
                    else {
                        this.indexChange.emit(this.state.currIndex);
                    }
                }
            };
        GalleryThumbComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-thumb',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <div *ngIf=\"thumbState$ | async; let thumbState\"\n         class=\"g-thumb-container\">\n      <div class=\"g-thumbs\"\n           [class.-no-transition]=\"thumbState.active\"\n           [ngStyle]=\"thumbState.style\">\n        <div *ngFor=\"let item of state.items;let i = index\"\n             class=\"g-thumb\"\n             [class.-current]=\"i === state.currIndex\"\n             (tapClick)=\"indexChange.emit(i)\"\n             [tapClickDisabled]=\"config.disableThumb\">\n          <ng-container [item]=\"item\" type=\"thumb\"></ng-container>\n        </div>\n      </div>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        GalleryThumbComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        GalleryThumbComponent.propDecorators = {
            "state": [{ type: core.Input },],
            "config": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
            "height": [{ type: core.HostBinding, args: ['style.height',] },],
            "width": [{ type: core.HostBinding, args: ['style.width',] },],
        };
        return GalleryThumbComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryDotsComponent = (function () {
        function GalleryDotsComponent() {
            this.indexChange = new core.EventEmitter();
        }
        GalleryDotsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-dots',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <div class=\"g-dot\"\n         *ngFor=\"let item of state.items; let i = index\"\n         (tapClick)=\"indexChange.emit(i)\">\n      <div class=\"g-dot-inner\"\n           [class.-current]=\"i === state.currIndex\"></div>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        GalleryDotsComponent.ctorParameters = function () { return []; };
        GalleryDotsComponent.propDecorators = {
            "state": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
        };
        return GalleryDotsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GallerySliderComponent = (function () {
        function GallerySliderComponent(_el, platform) {
            var _this = this;
            this._el = _el;
            this.platform = platform;
            this.stateStream$ = new BehaviorSubject.BehaviorSubject({ value: 0, active: false });
            this.indexChange = new core.EventEmitter();
            this.sliderState$ = this.stateStream$.pipe(map.map(function (state) {
                return ({
                    style: _this.sliderStyle(state.value),
                    active: state.active
                });
            }));
        }
        /**
         * @return {?}
         */
        GallerySliderComponent.prototype.viewDepth = /**
         * @return {?}
         */
            function () {
                return { transform: "perspective(50px) translate3d(0, 0, " + -this.config.zoomOut + "px)" };
            };
        /**
         * @param {?} delta
         * @return {?}
         */
        GallerySliderComponent.prototype.sliderStyle = /**
         * @param {?} delta
         * @return {?}
         */
            function (delta) {
                switch (this.config.slidingDirection) {
                    case 'horizontal':
                        return {
                            transform: "translate3d(" + (-(this.state.currIndex * this._el.nativeElement.offsetWidth) + delta) + "px, 0, 0)",
                            width: this._el.nativeElement.offsetWidth * this.state.items.length + 'px',
                            height: '100%'
                        };
                    case 'vertical':
                        return {
                            transform: "translate3d(0, " + (-(this.state.currIndex * this._el.nativeElement.offsetHeight) + delta) + "px, 0)",
                            width: '100%',
                            height: this._el.nativeElement.offsetHeight * this.state.items.length + 'px',
                        };
                }
            };
        /**
         * @return {?}
         */
        GallerySliderComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.stateStream$.next({ value: 0, active: false });
            };
        /**
         * @return {?}
         */
        GallerySliderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.config.gestures && typeof Hammer !== 'undefined') {
                    this.mc = new Hammer(this._el.nativeElement);
                    this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
                    // Slides thumbnails
                    this.mc.on('pan', function (e) {
                        switch (_this.config.slidingDirection) {
                            case 'horizontal':
                                _this.stateStream$.next({ value: e.deltaX, active: true });
                                if (e.isFinal) {
                                    _this.stateStream$.next({ value: 0, active: false });
                                    _this.horizontalPan(e);
                                }
                                break;
                            case 'vertical':
                                _this.stateStream$.next({ value: e.deltaY, active: true });
                                if (e.isFinal) {
                                    _this.stateStream$.next({ value: 0, active: false });
                                    _this.verticalPan(e);
                                }
                        }
                    });
                }
                // Rearrange slider on window resize
                if (common.isPlatformBrowser(this.platform)) {
                    this.resizeSub$ = fromEvent.fromEvent(window, 'resize').pipe(debounceTime.debounceTime(200), tap.tap(function () { return _this.stateStream$.next(_this.stateStream$.getValue()); })).subscribe();
                }
                // Fix wrong slider width on init
                setTimeout(function () {
                    _this.stateStream$.next({ value: 0, active: false });
                }, 300);
            };
        /**
         * @return {?}
         */
        GallerySliderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.mc) {
                    this.mc.destroy();
                }
                if (this.resizeSub$) {
                    this.resizeSub$.unsubscribe();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GallerySliderComponent.prototype.verticalPan = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.velocityY > 0.3) {
                    this.indexChange.emit('prev');
                }
                else if (e.velocityY < -0.3) {
                    this.indexChange.emit('next');
                }
                else {
                    if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('next');
                    }
                    else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('prev');
                    }
                    else {
                        this.indexChange.emit(this.state.currIndex);
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GallerySliderComponent.prototype.horizontalPan = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.velocityX > 0.3) {
                    this.indexChange.emit('prev');
                }
                else if (e.velocityX < -0.3) {
                    this.indexChange.emit('next');
                }
                else {
                    if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('next');
                    }
                    else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                        this.indexChange.emit('prev');
                    }
                    else {
                        this.indexChange.emit(this.state.currIndex);
                    }
                }
            };
        GallerySliderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-slider',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"slides-container\"\n         [ngStyle]=\"viewDepth()\">\n      <div class=\"slides\"\n           [class.-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n        <div *ngFor=\"let item of state.items\" class=\"slide\">\n          <ng-container [item]=\"item\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  "
                    },] },
        ];
        /** @nocollapse */
        GallerySliderComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
            ];
        };
        GallerySliderComponent.propDecorators = {
            "state": [{ type: core.Input },],
            "config": [{ type: core.Input },],
            "width": [{ type: core.Input },],
            "height": [{ type: core.Input },],
            "indexChange": [{ type: core.Output },],
        };
        return GallerySliderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryCounterComponent = (function () {
        function GalleryCounterComponent() {
        }
        GalleryCounterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gallery-counter',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        template: "<div class=\"g-counter\">{{(state.currIndex + 1) + '/' + state.items.length}}</div>"
                    },] },
        ];
        /** @nocollapse */
        GalleryCounterComponent.ctorParameters = function () { return []; };
        GalleryCounterComponent.propDecorators = {
            "state": [{ type: core.Input },],
        };
        return GalleryCounterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LazyDirective = (function () {
        function LazyDirective(_el, _renderer) {
            var _this = this;
            this._el = _el;
            this._renderer = _renderer;
            this._worker$ = new Subject.Subject();
            this.loading = new core.EventEmitter();
            var /** @type {?} */ img = new Image();
            this._worker$.pipe(switchMap.switchMap(function (imageSrc) {
                // Image is loading
                // Image is loading
                _this.loading.emit(true);
                // Stop previously loading
                img.src = imageSrc;
                // Image load success
                var /** @type {?} */ loadSuccess = fromEvent.fromEvent(img, 'load').pipe(tap.tap(function () {
                    _this._renderer.setStyle(_this._el.nativeElement, 'backgroundImage', "url(" + imageSrc + ")");
                    _this.loading.emit(false);
                }));
                // Image load error
                var /** @type {?} */ loadError = fromEvent.fromEvent(img, 'error').pipe(tap.tap(function () { return _this.loading.emit(false); }));
                return zip.zip(loadSuccess, loadError);
            })).subscribe();
        }
        Object.defineProperty(LazyDirective.prototype, "lazyImage", {
            set: /**
             * @param {?} imagePath
             * @return {?}
             */ function (imagePath) {
                this.loadImage(imagePath);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} imagePath
         * @return {?}
         */
        LazyDirective.prototype.loadImage = /**
         * @param {?} imagePath
         * @return {?}
         */
            function (imagePath) {
                this._worker$.next(imagePath);
            };
        /**
         * @return {?}
         */
        LazyDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._worker$.complete();
            };
        LazyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lazyImage]'
                    },] },
        ];
        /** @nocollapse */
        LazyDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
            ];
        };
        LazyDirective.propDecorators = {
            "lazyImage": [{ type: core.Input, args: ['lazyImage',] },],
            "loading": [{ type: core.Output },],
        };
        return LazyDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TapClickDirective = (function () {
        function TapClickDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.tapClick = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        TapClickDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setTapEvent();
            };
        /** Enable gestures if hammer is loaded */
        /**
         * Enable gestures if hammer is loaded
         * @return {?}
         */
        TapClickDirective.prototype.setTapEvent = /**
         * Enable gestures if hammer is loaded
         * @return {?}
         */
            function () {
                var _this = this;
                if (typeof Hammer !== 'undefined') {
                    // Use hammer.js tap event
                    this.mc = new Hammer(this.el.nativeElement);
                    this.mc.on('tap', function () {
                        if (!_this.tapClickDisabled) {
                            _this.tapClick.emit(null);
                        }
                    });
                }
                else {
                    // Use normal click event
                    this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                        e.stopPropagation();
                        if (!_this.tapClickDisabled) {
                            _this.tapClick.emit(null);
                        }
                    });
                }
            };
        /**
         * @return {?}
         */
        TapClickDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.mc) {
                    this.mc.destroy();
                }
                else {
                    this.clickListener();
                }
            };
        TapClickDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[tapClick]'
                    },] },
        ];
        /** @nocollapse */
        TapClickDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
            ];
        };
        TapClickDirective.propDecorators = {
            "tapClickDisabled": [{ type: core.Input },],
            "tapClick": [{ type: core.Output },],
        };
        return TapClickDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GalleryItemDirective = (function () {
        function GalleryItemDirective(componentFactoryResolver, viewContainerRef) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.type = 'slide';
        }
        /**
         * @return {?}
         */
        GalleryItemDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ componentFactory = this.componentFactoryResolver
                    .resolveComponentFactory(this.item[this.type === 'slide' ? 'component' : 'thumbComponent']);
                this.viewContainerRef.clear();
                var /** @type {?} */ componentRef = this.viewContainerRef.createComponent(componentFactory);
                var /** @type {?} */ galleryItem = componentRef.instance;
                galleryItem.data = this.item.data;
            };
        GalleryItemDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[item]'
                    },] },
        ];
        /** @nocollapse */
        GalleryItemDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver, },
                { type: core.ViewContainerRef, },
            ];
        };
        GalleryItemDirective.propDecorators = {
            "item": [{ type: core.Input },],
            "type": [{ type: core.Input },],
        };
        return GalleryItemDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} galleryConfig
     * @return {?}
     */
    function galleryFactory(galleryConfig) {
        return new Gallery(galleryConfig);
    }
    var GalleryModule = (function () {
        function GalleryModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        GalleryModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: GalleryModule,
                    providers: [
                        {
                            provide: GALLERY_CONFIG,
                            useValue: config
                        },
                        {
                            provide: Gallery,
                            useFactory: galleryFactory,
                            deps: [GALLERY_CONFIG]
                        }
                    ]
                };
            };
        GalleryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            GalleryComponent,
                            GalleryCoreComponent,
                            GalleryNavComponent,
                            GalleryThumbComponent,
                            GalleryDotsComponent,
                            GallerySliderComponent,
                            GalleryCounterComponent,
                            ImageItemComponent,
                            VideoItemComponent,
                            IframeItemComponent,
                            ThumbnailItemComponent,
                            GalleryItemDirective,
                            LazyDirective,
                            TapClickDirective
                        ],
                        exports: [
                            GalleryComponent,
                            LazyDirective,
                            TapClickDirective
                        ],
                        entryComponents: [
                            IframeItemComponent,
                            ImageItemComponent,
                            VideoItemComponent,
                            ThumbnailItemComponent
                        ]
                    },] },
        ];
        /** @nocollapse */
        GalleryModule.ctorParameters = function () { return []; };
        return GalleryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.Gallery = Gallery;
    exports.GalleryRef = GalleryRef;
    exports.GalleryAction = GalleryAction;
    exports.ImageItem = ImageItem;
    exports.VideoItem = VideoItem;
    exports.IframeItem = IframeItem;
    exports.YoutubeItem = YoutubeItem;
    exports.ImageItemComponent = ImageItemComponent;
    exports.VideoItemComponent = VideoItemComponent;
    exports.IframeItemComponent = IframeItemComponent;
    exports.ThumbnailItemComponent = ThumbnailItemComponent;
    exports.galleryFactory = galleryFactory;
    exports.GalleryModule = GalleryModule;
    exports.ɵe = GalleryCoreComponent;
    exports.ɵj = GalleryCounterComponent;
    exports.ɵh = GalleryDotsComponent;
    exports.ɵf = GalleryNavComponent;
    exports.ɵi = GallerySliderComponent;
    exports.ɵg = GalleryThumbComponent;
    exports.ɵd = GalleryComponent;
    exports.ɵo = GalleryItemDirective;
    exports.ɵp = LazyDirective;
    exports.ɵq = TapClickDirective;
    exports.ɵm = IframeItemComponent;
    exports.ɵk = ImageItemComponent;
    exports.ɵn = ThumbnailItemComponent;
    exports.ɵl = VideoItemComponent;
    exports.ɵa = GALLERY_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,