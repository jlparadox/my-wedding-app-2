import { __assign, __spread } from 'tslib';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { filter } from 'rxjs/operators/filter';
import { InjectionToken, Inject, Injectable, ChangeDetectionStrategy, Component, Input, Output, EventEmitter, HostBinding, ElementRef, PLATFORM_ID, Directive, Renderer2, ComponentFactoryResolver, ViewContainerRef, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { map } from 'rxjs/operators/map';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { tap } from 'rxjs/operators/tap';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { Subject } from 'rxjs/Subject';
import { switchMap } from 'rxjs/operators/switchMap';
import { zip } from 'rxjs/observable/zip';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var GalleryAction = {
    INITIALIZED: 'initialized',
    ITEMS_CHANGED: 'itemsChanged',
    INDEX_CHANGED: 'indexChanged',
    OPENED: 'opened',
    CLOSED: 'closed',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Initial state
 */
var /** @type {?} */ defaultState = {
    action: GalleryAction.INITIALIZED,
    currIndex: 0,
    hasNext: false,
    hasPrev: false,
    items: []
};
var /** @type {?} */ defaultConfig = {
    gestures: true,
    panSensitivity: 25,
    counter: true,
    nav: true,
    dots: false,
    thumb: true,
    thumbWidth: 120,
    thumbHeight: 90,
    thumbPosition: 'bottom',
    disableThumb: false,
    slidingDirection: 'horizontal',
    zoomOut: 0,
    loadingIcon: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg stroke=\"#fff\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\">\n<circle cx=\"22\" cy=\"22\" r=\"1\">\n<animate attributeName=\"r\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/>\n<animate attributeName=\"stroke-opacity\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/>\n</circle>\n<circle cx=\"22\" cy=\"22\" r=\"1\">\n<animate attributeName=\"r\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/>\n<animate attributeName=\"stroke-opacity\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/>\n</circle>\n</g>\n</svg>"
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryRef = /** @class */ (function () {
    function GalleryRef(config, state) {
        if (config === void 0) { config = defaultConfig; }
        if (state === void 0) { state = defaultState; }
        this.config = config;
        this.state = state;
        this.state$ = new BehaviorSubject(state);
        this.config$ = new BehaviorSubject(defaultConfig);
        this.setConfig(config);
    }
    /**
     * Set gallery config
     * @param config
     */
    /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    GalleryRef.prototype.setConfig = /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.config = __assign({}, defaultConfig, this.config, config);
        this.config$.next(this.config);
    };
    /**
     * Set gallery state
     * @param state
     */
    /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    GalleryRef.prototype.setState = /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.state = __assign({}, this.state, state);
        this.state$.next(this.state);
    };
    /** Add gallery item
     * @param item - Gallery item object
     * @param active - Set the new item as current slide
     */
    /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    GalleryRef.prototype.add = /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    function (item, active) {
        var /** @type {?} */ items = __spread(this.state.items, [item]);
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this.state.currIndex
        });
    };
    /** Remove gallery item
     * @param i - Item index
     */
    /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    GalleryRef.prototype.remove = /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    function (i) {
        var /** @type {?} */ items = __spread(this.state.items.slice(0, i), this.state.items.slice(i + 1, this.state.items.length));
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    };
    /**
     * Load items and reset the state
     * @param items - Gallery images data
     */
    /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    GalleryRef.prototype.load = /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    function (items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items: items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    };
    /**
     * Set active item
     * @param i - Active Index
     * @param action - Action type
     */
    /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    GalleryRef.prototype.set = /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    function (i) {
        if (i !== this.state.currIndex) {
            this.setState({
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this.state.items.length - 1,
                hasPrev: i > 0
            });
        }
    };
    /**
     * Next item
     */
    /**
     * Next item
     * @return {?}
     */
    GalleryRef.prototype.next = /**
     * Next item
     * @return {?}
     */
    function () {
        if (this.state.hasNext) {
            this.set(this.state.currIndex + 1);
        }
        else if (this.config.loop) {
            this.set(0);
        }
    };
    /**
     * Prev item
     */
    /**
     * Prev item
     * @return {?}
     */
    GalleryRef.prototype.prev = /**
     * Prev item
     * @return {?}
     */
    function () {
        if (this.state.hasPrev) {
            this.set(this.state.currIndex - 1);
        }
        else if (this.config.loop) {
            this.set(this.state.items.length - 1);
        }
    };
    /**
     * Reset gallery to initial state
     */
    /**
     * Reset gallery to initial state
     * @return {?}
     */
    GalleryRef.prototype.reset = /**
     * Reset gallery to initial state
     * @return {?}
     */
    function () {
        this.setState(defaultState);
    };
    /**
     * Destroy GalleryRef (for internal use only)
     */
    /**
     * Destroy GalleryRef (for internal use only)
     * @return {?}
     */
    GalleryRef.prototype.destroy = /**
     * Destroy GalleryRef (for internal use only)
     * @return {?}
     */
    function () {
        this.state$.complete();
        this.config$.complete();
    };
    /** Gallery Events */
    /**
     * Stream that emits when gallery is initialized/reset
     */
    /**
     * Stream that emits when gallery is initialized/reset
     * @return {?}
     */
    GalleryRef.prototype.initialized = /**
     * Stream that emits when gallery is initialized/reset
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INITIALIZED; }));
    };
    /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     */
    /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     * @return {?}
     */
    GalleryRef.prototype.itemsChanged = /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.ITEMS_CHANGED; }));
    };
    /**
     * Stream that emits when current item is changed
     */
    /**
     * Stream that emits when current item is changed
     * @return {?}
     */
    GalleryRef.prototype.indexChanged = /**
     * Stream that emits when current item is changed
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INDEX_CHANGED; }));
    };
    return GalleryRef;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ GALLERY_CONFIG = new InjectionToken('galleryConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Gallery = /** @class */ (function () {
    function Gallery(config) {
        /**
         * Stores GalleryRef instances
         */
        this._instances = {};
        this.config = __assign({}, defaultConfig, config);
    }
    /**
     * Returns Gallery by ID
     */
    /**
     * Returns Gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    Gallery.prototype.ref = /**
     * Returns Gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            return this._instances[id];
        }
        else {
            config = __assign({}, this.config, config);
            return this._instances[id] = new GalleryRef(config);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    Gallery.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            this._instances[id].destroy();
            this._instances[id] = null;
        }
    };
    /**
     * @return {?}
     */
    Gallery.prototype.destroyAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (key) {
            _this._instances[key].destory();
            _this._instances[key] = null;
        });
    };
    /**
     * @return {?}
     */
    Gallery.prototype.resetAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (id) {
            if (id === void 0) { id = 'root'; }
            return _this._instances[id].gallery;
        })
            .map(function (gallery) { return gallery.reset(); });
    };
    Gallery.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Gallery.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] },] },
    ]; };
    return Gallery;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ImageItemComponent = /** @class */ (function () {
    function ImageItemComponent(gallery, sanitizer) {
        this.gallery = gallery;
        this.sanitizer = sanitizer;
    }
    ImageItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'image-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div [lazyImage]=\"data?.src\" (loading)=\"loading = $event\"></div>\n    <i class=\"g-loading\" *ngIf=\"loading\" [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(gallery.config.loadingIcon)\"></i>\n  ",
                    styles: ["\n    :host {\n      position: relative;\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      background-position: center center;\n      background-size: cover;\n      width: 100%;\n      height: 100%;\n    }\n  "],
                },] },
    ];
    /** @nocollapse */
    ImageItemComponent.ctorParameters = function () { return [
        { type: Gallery, },
        { type: DomSanitizer, },
    ]; };
    ImageItemComponent.propDecorators = {
        "data": [{ type: Input },],
    };
    return ImageItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var VideoItemComponent = /** @class */ (function () {
    function VideoItemComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    VideoItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'video-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <video controls\n           [src]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.src)\"\n           [poster]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.poster)\"></video>\n  ",
                    styles: ["\n    video {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    VideoItemComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    VideoItemComponent.propDecorators = {
        "data": [{ type: Input },],
    };
    return VideoItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var IframeItemComponent = /** @class */ (function () {
    function IframeItemComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    IframeItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'iframe-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <iframe frameborder=\"0\"\n            allowfullscreen\n            [src]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.src)\"></iframe>\n  ",
                    styles: ["\n    iframe {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    IframeItemComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    IframeItemComponent.propDecorators = {
        "data": [{ type: Input },],
    };
    return IframeItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ThumbnailItemComponent = /** @class */ (function () {
    function ThumbnailItemComponent() {
    }
    ThumbnailItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thumbnail-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div [lazyImage]=\"data.thumb\"></div>\n  ",
                    styles: ["\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      width: 100%;\n      height: 100%;\n      background-size: cover;\n      background-position: center center;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    ThumbnailItemComponent.ctorParameters = function () { return []; };
    ThumbnailItemComponent.propDecorators = {
        "data": [{ type: Input },],
    };
    return ThumbnailItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ImageItem = /** @class */ (function () {
    function ImageItem(src, thumb) {
        this.component = ImageItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = { src: src, thumb: thumb };
    }
    return ImageItem;
}());
var VideoItem = /** @class */ (function () {
    function VideoItem(src, thumb, poster) {
        this.component = VideoItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = { src: src, thumb: thumb, poster: poster };
    }
    return VideoItem;
}());
var IframeItem = /** @class */ (function () {
    function IframeItem(src, thumb) {
        this.component = IframeItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = { src: src, thumb: thumb };
    }
    return IframeItem;
}());
var YoutubeItem = /** @class */ (function () {
    function YoutubeItem(src, thumb) {
        this.component = IframeItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = {
            src: "//youtube.com/embed/" + src + "?wmode=transparent",
            thumb: thumb ? thumb : "//img.youtube.com/vi/" + src + "/default.jpg"
        };
    }
    return YoutubeItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(_gallery) {
        this._gallery = _gallery;
        this.gestures = this._gallery.config.gestures;
        this.panSensitivity = this._gallery.config.panSensitivity;
        this.zoomOut = this._gallery.config.zoomOut;
        this.dots = this._gallery.config.dots;
        this.thumb = this._gallery.config.thumb;
        this.nav = this._gallery.config.nav;
        this.counter = this._gallery.config.counter;
        this.thumbWidth = this._gallery.config.thumbWidth;
        this.thumbHeight = this._gallery.config.thumbHeight;
        this.disableThumb = this._gallery.config.disableThumb;
        this.thumbPosition = this._gallery.config.thumbPosition;
        this.slidingDirection = this._gallery.config.slidingDirection;
        this.destroyRef = true;
        this.indexChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GalleryComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return {
            gestures: this.gestures,
            panSensitivity: this.panSensitivity,
            zoomOut: this.zoomOut,
            counter: this.counter,
            nav: this.nav,
            dots: this.dots,
            thumb: this.thumb,
            thumbWidth: this.thumbWidth,
            thumbHeight: this.thumbHeight,
            thumbPosition: this.thumbPosition,
            disableThumb: this.disableThumb,
            slidingDirection: this.slidingDirection
        };
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.onIndexChange = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        switch (i) {
            case 'next':
                this.galleryRef.next();
                break;
            case 'prev':
                this.galleryRef.prev();
                break;
            default:
                this.galleryRef.set(i);
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.galleryRef instanceof GalleryRef) {
            this.galleryRef.setConfig(this.getConfig());
            if (this.items !== this.galleryRef.state.items) {
                this.load(this.items);
            }
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Get gallery instance by id
        this.galleryRef = this._gallery.ref(this.id);
        this.galleryRef.setConfig(this.getConfig());
        this.load(this.items);
        /** Subscribes to indexChange and itemsChange events when user bind them */
        if (this.indexChange.observers.length) {
            this._indexChange$ = this.galleryRef.indexChanged().subscribe(function (e) { return _this.indexChange.next(e); });
        }
        if (this.itemsChange.observers.length) {
            this._itemChange$ = this.galleryRef.itemsChanged().subscribe(function (e) { return _this.itemsChange.next(e); });
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._indexChange$) {
            this._indexChange$.unsubscribe();
        }
        if (this._itemChange$) {
            this._itemChange$.unsubscribe();
        }
        if (this.destroyRef) {
            this.galleryRef.reset();
        }
    };
    /**
     * @param {?} items
     * @return {?}
     */
    GalleryComponent.prototype.load = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.galleryRef.load(items);
    };
    /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.add = /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    function (item, active) {
        this.galleryRef.add(item, active);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.remove = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.remove(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.galleryRef.next();
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.galleryRef.prev();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.set = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.set(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.galleryRef.reset();
    };
    GalleryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-core [state]=\"galleryRef.state$ | async\"\n                  [config]=\"galleryRef.config$ | async\"\n                  (indexChange)=\"onIndexChange($event)\"></gallery-core>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryComponent.ctorParameters = function () { return [
        { type: Gallery, },
    ]; };
    GalleryComponent.propDecorators = {
        "id": [{ type: Input },],
        "items": [{ type: Input },],
        "gestures": [{ type: Input },],
        "panSensitivity": [{ type: Input },],
        "zoomOut": [{ type: Input },],
        "dots": [{ type: Input },],
        "thumb": [{ type: Input },],
        "nav": [{ type: Input },],
        "counter": [{ type: Input },],
        "thumbWidth": [{ type: Input },],
        "thumbHeight": [{ type: Input },],
        "disableThumb": [{ type: Input },],
        "thumbPosition": [{ type: Input },],
        "slidingDirection": [{ type: Input },],
        "destroyRef": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "itemsChange": [{ type: Output },],
    };
    return GalleryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryCoreComponent = /** @class */ (function () {
    function GalleryCoreComponent() {
        this.indexChange = new EventEmitter();
    }
    Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
        get: /**
         * Set thumbnails position ('top' | 'left' | 'right' | 'bottom')
         * @return {?}
         */
        function () {
            return this.config.thumbPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
        get: /**
         * Set thumbnails position ('horizontal' | 'vertical')
         * @return {?}
         */
        function () {
            return this.config.slidingDirection;
        },
        enumerable: true,
        configurable: true
    });
    GalleryCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-thumb *ngIf=\"config.thumb\"\n                  [state]=\"state\"\n                  [config]=\"config\"\n                  (indexChange)=\"indexChange.emit($event)\">\n    </gallery-thumb>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (indexChange)=\"indexChange.emit($event)\">\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (indexChange)=\"indexChange.emit($event)\">\n        </gallery-nav>\n      </gallery-slider>\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (indexChange)=\"indexChange.emit($event)\">\n      </gallery-dots>\n      <gallery-counter *ngIf=\"config.counter\"\n                      [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryCoreComponent.ctorParameters = function () { return []; };
    GalleryCoreComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "thumbPosition": [{ type: HostBinding, args: ['attr.thumbPosition',] },],
        "slidingDirection": [{ type: HostBinding, args: ['attr.slidingDirection',] },],
    };
    return GalleryCoreComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryNavComponent = /** @class */ (function () {
    function GalleryNavComponent() {
        this.indexChange = new EventEmitter();
    }
    GalleryNavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-nav',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <i *ngIf=\"config.loop || state.hasPrev\" class=\"g-nav-prev\" (tapClick)=\"indexChange.emit('prev')\"></i>\n    <i *ngIf=\"config.loop || state.hasNext\" class=\"g-nav-next\" (tapClick)=\"indexChange.emit('next')\"></i>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryNavComponent.ctorParameters = function () { return []; };
    GalleryNavComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "indexChange": [{ type: Output },],
    };
    return GalleryNavComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryThumbComponent = /** @class */ (function () {
    function GalleryThumbComponent(_el) {
        var _this = this;
        this._el = _el;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.thumbState$ = this.stateStream$.pipe(map(function (state) {
            return ({
                style: _this.thumbsStyle(state.value),
                active: state.active
            });
        }));
    }
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', function (e) {
                switch (_this.config.thumbPosition) {
                    case 'right':
                    case 'left':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                        break;
                    case 'top':
                    case 'bottom':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                }
            });
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
    };
    /**
     * @param {?} delta
     * @return {?}
     */
    GalleryThumbComponent.prototype.thumbsStyle = /**
     * @param {?} delta
     * @return {?}
     */
    function (delta) {
        var /** @type {?} */ value;
        switch (this.config.thumbPosition) {
            case 'top':
            case 'bottom':
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - delta);
                return {
                    transform: "translate3d(" + value + "px, 0, 0)",
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case 'left':
            case 'right':
                this.width = this.config.thumbWidth + 'px';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - delta);
                return {
                    transform: "translate3d(0, " + value + "px, 0)",
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px',
                };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GalleryThumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-thumb',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"thumbState$ | async; let thumbState\"\n         class=\"g-thumb-container\">\n      <div class=\"g-thumbs\"\n           [class.-no-transition]=\"thumbState.active\"\n           [ngStyle]=\"thumbState.style\">\n        <div *ngFor=\"let item of state.items;let i = index\"\n             class=\"g-thumb\"\n             [class.-current]=\"i === state.currIndex\"\n             (tapClick)=\"indexChange.emit(i)\"\n             [tapClickDisabled]=\"config.disableThumb\">\n          <ng-container [item]=\"item\" type=\"thumb\"></ng-container>\n        </div>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryThumbComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    GalleryThumbComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "height": [{ type: HostBinding, args: ['style.height',] },],
        "width": [{ type: HostBinding, args: ['style.width',] },],
    };
    return GalleryThumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryDotsComponent = /** @class */ (function () {
    function GalleryDotsComponent() {
        this.indexChange = new EventEmitter();
    }
    GalleryDotsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-dots',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div class=\"g-dot\"\n         *ngFor=\"let item of state.items; let i = index\"\n         (tapClick)=\"indexChange.emit(i)\">\n      <div class=\"g-dot-inner\"\n           [class.-current]=\"i === state.currIndex\"></div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryDotsComponent.ctorParameters = function () { return []; };
    GalleryDotsComponent.propDecorators = {
        "state": [{ type: Input },],
        "indexChange": [{ type: Output },],
    };
    return GalleryDotsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GallerySliderComponent = /** @class */ (function () {
    function GallerySliderComponent(_el, platform) {
        var _this = this;
        this._el = _el;
        this.platform = platform;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.sliderState$ = this.stateStream$.pipe(map(function (state) {
            return ({
                style: _this.sliderStyle(state.value),
                active: state.active
            });
        }));
    }
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.viewDepth = /**
     * @return {?}
     */
    function () {
        return { transform: "perspective(50px) translate3d(0, 0, " + -this.config.zoomOut + "px)" };
    };
    /**
     * @param {?} delta
     * @return {?}
     */
    GallerySliderComponent.prototype.sliderStyle = /**
     * @param {?} delta
     * @return {?}
     */
    function (delta) {
        switch (this.config.slidingDirection) {
            case 'horizontal':
                return {
                    transform: "translate3d(" + (-(this.state.currIndex * this._el.nativeElement.offsetWidth) + delta) + "px, 0, 0)",
                    width: this._el.nativeElement.offsetWidth * this.state.items.length + 'px',
                    height: '100%'
                };
            case 'vertical':
                return {
                    transform: "translate3d(0, " + (-(this.state.currIndex * this._el.nativeElement.offsetHeight) + delta) + "px, 0)",
                    width: '100%',
                    height: this._el.nativeElement.offsetHeight * this.state.items.length + 'px',
                };
        }
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', function (e) {
                switch (_this.config.slidingDirection) {
                    case 'horizontal':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                        break;
                    case 'vertical':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                }
            });
        }
        // Rearrange slider on window resize
        if (isPlatformBrowser(this.platform)) {
            this.resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(function () { return _this.stateStream$.next(_this.stateStream$.getValue()); })).subscribe();
        }
        // Fix wrong slider width on init
        setTimeout(function () {
            _this.stateStream$.next({ value: 0, active: false });
        }, 300);
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        if (this.resizeSub$) {
            this.resizeSub$.unsubscribe();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GallerySliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"slides-container\"\n         [ngStyle]=\"viewDepth()\">\n      <div class=\"slides\"\n           [class.-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n        <div *ngFor=\"let item of state.items\" class=\"slide\">\n          <ng-container [item]=\"item\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GallerySliderComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    GallerySliderComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "width": [{ type: Input },],
        "height": [{ type: Input },],
        "indexChange": [{ type: Output },],
    };
    return GallerySliderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryCounterComponent = /** @class */ (function () {
    function GalleryCounterComponent() {
    }
    GalleryCounterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-counter',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "<div class=\"g-counter\">{{(state.currIndex + 1) + '/' + state.items.length}}</div>"
                },] },
    ];
    /** @nocollapse */
    GalleryCounterComponent.ctorParameters = function () { return []; };
    GalleryCounterComponent.propDecorators = {
        "state": [{ type: Input },],
    };
    return GalleryCounterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LazyDirective = /** @class */ (function () {
    function LazyDirective(_el, _renderer) {
        var _this = this;
        this._el = _el;
        this._renderer = _renderer;
        this._worker$ = new Subject();
        this.loading = new EventEmitter();
        var /** @type {?} */ img = new Image();
        this._worker$.pipe(switchMap(function (imageSrc) {
            // Image is loading
            // Image is loading
            _this.loading.emit(true);
            // Stop previously loading
            img.src = imageSrc;
            // Image load success
            var /** @type {?} */ loadSuccess = fromEvent(img, 'load').pipe(tap(function () {
                _this._renderer.setStyle(_this._el.nativeElement, 'backgroundImage', "url(" + imageSrc + ")");
                _this.loading.emit(false);
            }));
            // Image load error
            var /** @type {?} */ loadError = fromEvent(img, 'error').pipe(tap(function () { return _this.loading.emit(false); }));
            return zip(loadSuccess, loadError);
        })).subscribe();
    }
    Object.defineProperty(LazyDirective.prototype, "lazyImage", {
        set: /**
         * @param {?} imagePath
         * @return {?}
         */
        function (imagePath) {
            this.loadImage(imagePath);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} imagePath
     * @return {?}
     */
    LazyDirective.prototype.loadImage = /**
     * @param {?} imagePath
     * @return {?}
     */
    function (imagePath) {
        this._worker$.next(imagePath);
    };
    /**
     * @return {?}
     */
    LazyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._worker$.complete();
    };
    LazyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyImage]'
                },] },
    ];
    /** @nocollapse */
    LazyDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    LazyDirective.propDecorators = {
        "lazyImage": [{ type: Input, args: ['lazyImage',] },],
        "loading": [{ type: Output },],
    };
    return LazyDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TapClickDirective = /** @class */ (function () {
    function TapClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tapClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTapEvent();
    };
    /** Enable gestures if hammer is loaded */
    /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    TapClickDirective.prototype.setTapEvent = /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof Hammer !== 'undefined') {
            // Use hammer.js tap event
            this.mc = new Hammer(this.el.nativeElement);
            this.mc.on('tap', function () {
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
        else {
            // Use normal click event
            this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                e.stopPropagation();
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        else {
            this.clickListener();
        }
    };
    TapClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tapClick]'
                },] },
    ];
    /** @nocollapse */
    TapClickDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    TapClickDirective.propDecorators = {
        "tapClickDisabled": [{ type: Input },],
        "tapClick": [{ type: Output },],
    };
    return TapClickDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryItemDirective = /** @class */ (function () {
    function GalleryItemDirective(componentFactoryResolver, viewContainerRef) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.type = 'slide';
    }
    /**
     * @return {?}
     */
    GalleryItemDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ componentFactory = this.componentFactoryResolver
            .resolveComponentFactory(this.item[this.type === 'slide' ? 'component' : 'thumbComponent']);
        this.viewContainerRef.clear();
        var /** @type {?} */ componentRef = this.viewContainerRef.createComponent(componentFactory);
        var /** @type {?} */ galleryItem = componentRef.instance;
        galleryItem.data = this.item.data;
    };
    GalleryItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[item]'
                },] },
    ];
    /** @nocollapse */
    GalleryItemDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: ViewContainerRef, },
    ]; };
    GalleryItemDirective.propDecorators = {
        "item": [{ type: Input },],
        "type": [{ type: Input },],
    };
    return GalleryItemDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} galleryConfig
 * @return {?}
 */
function galleryFactory(galleryConfig) {
    return new Gallery(galleryConfig);
}
var GalleryModule = /** @class */ (function () {
    function GalleryModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    GalleryModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: GalleryModule,
            providers: [
                {
                    provide: GALLERY_CONFIG,
                    useValue: config
                },
                {
                    provide: Gallery,
                    useFactory: galleryFactory,
                    deps: [GALLERY_CONFIG]
                }
            ]
        };
    };
    GalleryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        GalleryComponent,
                        GalleryCoreComponent,
                        GalleryNavComponent,
                        GalleryThumbComponent,
                        GalleryDotsComponent,
                        GallerySliderComponent,
                        GalleryCounterComponent,
                        ImageItemComponent,
                        VideoItemComponent,
                        IframeItemComponent,
                        ThumbnailItemComponent,
                        GalleryItemDirective,
                        LazyDirective,
                        TapClickDirective
                    ],
                    exports: [
                        GalleryComponent,
                        LazyDirective,
                        TapClickDirective
                    ],
                    entryComponents: [
                        IframeItemComponent,
                        ImageItemComponent,
                        VideoItemComponent,
                        ThumbnailItemComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    GalleryModule.ctorParameters = function () { return []; };
    return GalleryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Gallery, GalleryRef, GalleryAction, ImageItem, VideoItem, IframeItem, YoutubeItem, ImageItemComponent, VideoItemComponent, IframeItemComponent, ThumbnailItemComponent, galleryFactory, GalleryModule, GalleryCoreComponent as ɵe, GalleryCounterComponent as ɵj, GalleryDotsComponent as ɵh, GalleryNavComponent as ɵf, GallerySliderComponent as ɵi, GalleryThumbComponent as ɵg, GalleryComponent as ɵd, GalleryItemDirective as ɵo, LazyDirective as ɵp, TapClickDirective as ɵq, IframeItemComponent as ɵm, ImageItemComponent as ɵk, ThumbnailItemComponent as ɵn, VideoItemComponent as ɵl, GALLERY_CONFIG as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,