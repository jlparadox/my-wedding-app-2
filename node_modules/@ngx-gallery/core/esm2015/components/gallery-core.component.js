/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, HostBinding, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
export class GalleryCoreComponent {
    constructor() {
        this.indexChange = new EventEmitter();
    }
    /**
     * Set thumbnails position ('top' | 'left' | 'right' | 'bottom')
     * @return {?}
     */
    get thumbPosition() {
        return this.config.thumbPosition;
    }
    /**
     * Set thumbnails position ('horizontal' | 'vertical')
     * @return {?}
     */
    get slidingDirection() {
        return this.config.slidingDirection;
    }
}
GalleryCoreComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-core',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: `
    <gallery-thumb *ngIf="config.thumb"
                  [state]="state"
                  [config]="config"
                  (indexChange)="indexChange.emit($event)">
    </gallery-thumb>
    <div class="g-box">
      <gallery-slider [state]="state"
                      [config]="config"
                      (indexChange)="indexChange.emit($event)">
        <gallery-nav *ngIf="config.nav && state.items.length > 1"
                    [state]="state"
                    [config]="config"
                    (indexChange)="indexChange.emit($event)">
        </gallery-nav>
      </gallery-slider>
      <gallery-dots *ngIf="config.dots"
                    [state]="state"
                    (indexChange)="indexChange.emit($event)">
      </gallery-dots>
      <gallery-counter *ngIf="config.counter"
                      [state]="state">
      </gallery-counter>
    </div>
  `
            },] },
];
/** @nocollapse */
GalleryCoreComponent.ctorParameters = () => [];
GalleryCoreComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "indexChange": [{ type: Output },],
    "thumbPosition": [{ type: HostBinding, args: ['attr.thumbPosition',] },],
    "slidingDirection": [{ type: HostBinding, args: ['attr.slidingDirection',] },],
};
function GalleryCoreComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryCoreComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryCoreComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GalleryCoreComponent.propDecorators;
    /** @type {?} */
    GalleryCoreComponent.prototype.state;
    /** @type {?} */
    GalleryCoreComponent.prototype.config;
    /** @type {?} */
    GalleryCoreComponent.prototype.indexChange;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9nYWxsZXJ5LWNvcmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWlDN0csTUFBTTs7MkJBSW9CLElBQUksWUFBWSxFQUFtQjs7Ozs7O1FBR3BCLGFBQWE7UUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOzs7Ozs7UUFJTyxnQkFBZ0I7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7Ozs7WUEzQ3ZDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JUO2FBQ0Y7Ozs7O3NCQUdFLEtBQUs7dUJBQ0wsS0FBSzs0QkFDTCxNQUFNOzhCQUdOLFdBQVcsU0FBQyxvQkFBb0I7aUNBS2hDLFdBQVcsU0FBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZywgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcsIEdhbGxlcnlTdGF0ZSB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktY29yZScsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxnYWxsZXJ5LXRodW1iICpuZ0lmPVwiY29uZmlnLnRodW1iXCJcclxuICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCJcclxuICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAoaW5kZXhDaGFuZ2UpPVwiaW5kZXhDaGFuZ2UuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICA8L2dhbGxlcnktdGh1bWI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZy1ib3hcIj5cclxuICAgICAgPGdhbGxlcnktc2xpZGVyIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBbY29uZmlnXT1cImNvbmZpZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAoaW5kZXhDaGFuZ2UpPVwiaW5kZXhDaGFuZ2UuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgICAgPGdhbGxlcnktbmF2ICpuZ0lmPVwiY29uZmlnLm5hdiAmJiBzdGF0ZS5pdGVtcy5sZW5ndGggPiAxXCJcclxuICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAoaW5kZXhDaGFuZ2UpPVwiaW5kZXhDaGFuZ2UuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgICAgPC9nYWxsZXJ5LW5hdj5cclxuICAgICAgPC9nYWxsZXJ5LXNsaWRlcj5cclxuICAgICAgPGdhbGxlcnktZG90cyAqbmdJZj1cImNvbmZpZy5kb3RzXCJcclxuICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIChpbmRleENoYW5nZSk9XCJpbmRleENoYW5nZS5lbWl0KCRldmVudClcIj5cclxuICAgICAgPC9nYWxsZXJ5LWRvdHM+XHJcbiAgICAgIDxnYWxsZXJ5LWNvdW50ZXIgKm5nSWY9XCJjb25maWcuY291bnRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIj5cclxuICAgICAgPC9nYWxsZXJ5LWNvdW50ZXI+XHJcbiAgICA8L2Rpdj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5Q29yZUNvbXBvbmVudCB7XHJcblxyXG4gIEBJbnB1dCgpIHN0YXRlOiBHYWxsZXJ5U3RhdGU7XHJcbiAgQElucHV0KCkgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG4gIEBPdXRwdXQoKSBpbmRleENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPigpO1xyXG5cclxuICAvKiogU2V0IHRodW1ibmFpbHMgcG9zaXRpb24gKCd0b3AnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdib3R0b20nKSAqL1xyXG4gIEBIb3N0QmluZGluZygnYXR0ci50aHVtYlBvc2l0aW9uJykgZ2V0IHRodW1iUG9zaXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcudGh1bWJQb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKiBTZXQgdGh1bWJuYWlscyBwb3NpdGlvbiAoJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJykgKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuc2xpZGluZ0RpcmVjdGlvbicpIGdldCBzbGlkaW5nRGlyZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnNsaWRpbmdEaXJlY3Rpb247XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=