/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ChangeDetectionStrategy, ElementRef, EventEmitter, HostBinding } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
export class GalleryThumbComponent {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.thumbState$ = this.stateStream$.pipe(map((state) => ({
            style: this.thumbsStyle(state.value),
            active: state.active
        })));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.stateStream$.next({ value: 0, active: false });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', (e) => {
                switch (this.config.thumbPosition) {
                    case 'right':
                    case 'left':
                        this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            this.stateStream$.next({ value: 0, active: false });
                            this.verticalPan(e);
                        }
                        break;
                    case 'top':
                    case 'bottom':
                        this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            this.stateStream$.next({ value: 0, active: false });
                            this.horizontalPan(e);
                        }
                }
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mc) {
            this.mc.destroy();
        }
    }
    /**
     * @param {?} delta
     * @return {?}
     */
    thumbsStyle(delta) {
        let /** @type {?} */ value;
        switch (this.config.thumbPosition) {
            case 'top':
            case 'bottom':
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - delta);
                return {
                    transform: `translate3d(${value}px, 0, 0)`,
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case 'left':
            case 'right':
                this.width = this.config.thumbWidth + 'px';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - delta);
                return {
                    transform: `translate3d(0, ${value}px, 0)`,
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px',
                };
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    verticalPan(e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    horizontalPan(e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    }
}
GalleryThumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-thumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: `
    <div *ngIf="thumbState$ | async; let thumbState"
         class="g-thumb-container">
      <div class="g-thumbs"
           [class.-no-transition]="thumbState.active"
           [ngStyle]="thumbState.style">
        <div *ngFor="let item of state.items;let i = index"
             class="g-thumb"
             [class.-current]="i === state.currIndex"
             (tapClick)="indexChange.emit(i)"
             [tapClickDisabled]="config.disableThumb">
          <ng-container [item]="item" type="thumb"></ng-container>
        </div>
      </div>
    </div>
  `
            },] },
];
/** @nocollapse */
GalleryThumbComponent.ctorParameters = () => [
    { type: ElementRef, },
];
GalleryThumbComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "indexChange": [{ type: Output },],
    "height": [{ type: HostBinding, args: ['style.height',] },],
    "width": [{ type: HostBinding, args: ['style.width',] },],
};
function GalleryThumbComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryThumbComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryThumbComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GalleryThumbComponent.propDecorators;
    /** @type {?} */
    GalleryThumbComponent.prototype.mc;
    /** @type {?} */
    GalleryThumbComponent.prototype.thumbState$;
    /** @type {?} */
    GalleryThumbComponent.prototype.stateStream$;
    /** @type {?} */
    GalleryThumbComponent.prototype.state;
    /** @type {?} */
    GalleryThumbComponent.prototype.config;
    /** @type {?} */
    GalleryThumbComponent.prototype.indexChange;
    /** @type {?} */
    GalleryThumbComponent.prototype.height;
    /** @type {?} */
    GalleryThumbComponent.prototype.width;
    /** @type {?} */
    GalleryThumbComponent.prototype._el;
}

//# sourceMappingURL=data:application/json;base64,