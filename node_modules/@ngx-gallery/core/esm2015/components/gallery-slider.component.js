/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ChangeDetectionStrategy, ElementRef, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { debounceTime } from 'rxjs/operators/debounceTime';
export class GallerySliderComponent {
    /**
     * @param {?} _el
     * @param {?} platform
     */
    constructor(_el, platform) {
        this._el = _el;
        this.platform = platform;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.sliderState$ = this.stateStream$.pipe(map((state) => ({
            style: this.sliderStyle(state.value),
            active: state.active
        })));
    }
    /**
     * @return {?}
     */
    viewDepth() {
        return { transform: `perspective(50px) translate3d(0, 0, ${-this.config.zoomOut}px)` };
    }
    /**
     * @param {?} delta
     * @return {?}
     */
    sliderStyle(delta) {
        switch (this.config.slidingDirection) {
            case 'horizontal':
                return {
                    transform: `translate3d(${-(this.state.currIndex * this._el.nativeElement.offsetWidth) + delta}px, 0, 0)`,
                    width: this._el.nativeElement.offsetWidth * this.state.items.length + 'px',
                    height: '100%'
                };
            case 'vertical':
                return {
                    transform: `translate3d(0, ${-(this.state.currIndex * this._el.nativeElement.offsetHeight) + delta}px, 0)`,
                    width: '100%',
                    height: this._el.nativeElement.offsetHeight * this.state.items.length + 'px',
                };
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.stateStream$.next({ value: 0, active: false });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.config.gestures && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', (e) => {
                switch (this.config.slidingDirection) {
                    case 'horizontal':
                        this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            this.stateStream$.next({ value: 0, active: false });
                            this.horizontalPan(e);
                        }
                        break;
                    case 'vertical':
                        this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            this.stateStream$.next({ value: 0, active: false });
                            this.verticalPan(e);
                        }
                }
            });
        }
        // Rearrange slider on window resize
        if (isPlatformBrowser(this.platform)) {
            this.resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(() => this.stateStream$.next(this.stateStream$.getValue()))).subscribe();
        }
        // Fix wrong slider width on init
        setTimeout(() => {
            this.stateStream$.next({ value: 0, active: false });
        }, 300);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mc) {
            this.mc.destroy();
        }
        if (this.resizeSub$) {
            this.resizeSub$.unsubscribe();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    verticalPan(e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    horizontalPan(e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    }
}
GallerySliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: `
    <div *ngIf="sliderState$ | async; let sliderState"
         class="slides-container"
         [ngStyle]="viewDepth()">
      <div class="slides"
           [class.-no-transition]="sliderState.active"
           [ngStyle]="sliderState.style">
        <div *ngFor="let item of state.items" class="slide">
          <ng-container [item]="item"></ng-container>
        </div>
      </div>
    </div>
    <ng-content></ng-content>
  `
            },] },
];
/** @nocollapse */
GallerySliderComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
GallerySliderComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "width": [{ type: Input },],
    "height": [{ type: Input },],
    "indexChange": [{ type: Output },],
};
function GallerySliderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GallerySliderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GallerySliderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GallerySliderComponent.propDecorators;
    /** @type {?} */
    GallerySliderComponent.prototype.mc;
    /** @type {?} */
    GallerySliderComponent.prototype.resizeSub$;
    /** @type {?} */
    GallerySliderComponent.prototype.sliderState$;
    /** @type {?} */
    GallerySliderComponent.prototype.stateStream$;
    /** @type {?} */
    GallerySliderComponent.prototype.state;
    /** @type {?} */
    GallerySliderComponent.prototype.config;
    /** @type {?} */
    GallerySliderComponent.prototype.width;
    /** @type {?} */
    GallerySliderComponent.prototype.height;
    /** @type {?} */
    GallerySliderComponent.prototype.indexChange;
    /** @type {?} */
    GallerySliderComponent.prototype._el;
    /** @type {?} */
    GallerySliderComponent.prototype.platform;
}

//# sourceMappingURL=data:application/json;base64,