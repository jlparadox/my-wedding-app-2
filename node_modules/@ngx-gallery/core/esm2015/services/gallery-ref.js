/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { filter } from 'rxjs/operators/filter';
import { defaultConfig, defaultState } from '../utils/gallery.default';
import { GalleryAction } from '../models';
export class GalleryRef {
    /**
     * @param {?=} config
     * @param {?=} state
     */
    constructor(config = defaultConfig, state = defaultState) {
        this.config = config;
        this.state = state;
        this.state$ = new BehaviorSubject(state);
        this.config$ = new BehaviorSubject(defaultConfig);
        this.setConfig(config);
    }
    /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        this.config = Object.assign({}, defaultConfig, this.config, config);
        this.config$.next(this.config);
    }
    /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    setState(state) {
        this.state = Object.assign({}, this.state, state);
        this.state$.next(this.state);
    }
    /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    add(item, active) {
        const /** @type {?} */ items = [...this.state.items, item];
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this.state.currIndex
        });
    }
    /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    remove(i) {
        const /** @type {?} */ items = [
            ...this.state.items.slice(0, i),
            ...this.state.items.slice(i + 1, this.state.items.length)
        ];
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    }
    /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    load(items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items: items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    }
    /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    set(i) {
        if (i !== this.state.currIndex) {
            this.setState({
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this.state.items.length - 1,
                hasPrev: i > 0
            });
        }
    }
    /**
     * Next item
     * @return {?}
     */
    next() {
        if (this.state.hasNext) {
            this.set(this.state.currIndex + 1);
        }
        else if (this.config.loop) {
            this.set(0);
        }
    }
    /**
     * Prev item
     * @return {?}
     */
    prev() {
        if (this.state.hasPrev) {
            this.set(this.state.currIndex - 1);
        }
        else if (this.config.loop) {
            this.set(this.state.items.length - 1);
        }
    }
    /**
     * Reset gallery to initial state
     * @return {?}
     */
    reset() {
        this.setState(defaultState);
    }
    /**
     * Destroy GalleryRef (for internal use only)
     * @return {?}
     */
    destroy() {
        this.state$.complete();
        this.config$.complete();
    }
    /**
     * Stream that emits when gallery is initialized/reset
     * @return {?}
     */
    initialized() {
        return this.state$.pipe(filter((state) => state.action === GalleryAction.INITIALIZED));
    }
    /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     * @return {?}
     */
    itemsChanged() {
        return this.state$.pipe(filter((state) => state.action === GalleryAction.ITEMS_CHANGED));
    }
    /**
     * Stream that emits when current item is changed
     * @return {?}
     */
    indexChanged() {
        return this.state$.pipe(filter((state) => state.action === GalleryAction.INDEX_CHANGED));
    }
}
function GalleryRef_tsickle_Closure_declarations() {
    /** @type {?} */
    GalleryRef.prototype.state$;
    /** @type {?} */
    GalleryRef.prototype.config$;
    /** @type {?} */
    GalleryRef.prototype.config;
    /** @type {?} */
    GalleryRef.prototype.state;
}

//# sourceMappingURL=data:application/json;base64,