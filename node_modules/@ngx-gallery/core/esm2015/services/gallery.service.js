/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { GalleryRef } from './gallery-ref';
import { GALLERY_CONFIG } from '../utils/gallery.token';
import { defaultConfig } from '../utils/gallery.default';
export class Gallery {
    /**
     * @param {?} config
     */
    constructor(config) {
        /**
         * Stores GalleryRef instances
         */
        this._instances = {};
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * Returns Gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    ref(id = 'root', config) {
        if (this._instances[id] instanceof GalleryRef) {
            return this._instances[id];
        }
        else {
            config = Object.assign({}, this.config, config);
            return this._instances[id] = new GalleryRef(config);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id = 'root') {
        if (this._instances[id] instanceof GalleryRef) {
            this._instances[id].destroy();
            this._instances[id] = null;
        }
    }
    /**
     * @return {?}
     */
    destroyAll() {
        Object.keys(this._instances)
            .map((key) => {
            this._instances[key].destory();
            this._instances[key] = null;
        });
    }
    /**
     * @return {?}
     */
    resetAll() {
        Object.keys(this._instances)
            .map((id = 'root') => this._instances[id].gallery)
            .map((gallery) => gallery.reset());
    }
}
Gallery.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Gallery.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] },] },
];
function Gallery_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Gallery.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Gallery.ctorParameters;
    /**
     * Stores GalleryRef instances
     * @type {?}
     */
    Gallery.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    Gallery.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9nYWxsZXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUl6RCxNQUFNOzs7O0lBUUosWUFBb0M7Ozs7MEJBTE4sRUFBRTtRQU05QixJQUFJLENBQUMsTUFBTSxxQkFBTyxhQUFhLEVBQUssTUFBTSxDQUFDLENBQUM7S0FDN0M7Ozs7Ozs7SUFLRCxHQUFHLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRSxNQUFzQjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0scUJBQU8sSUFBSSxDQUFDLE1BQU0sRUFBSyxNQUFNLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyRDtLQUNGOzs7OztJQUVELE9BQU8sQ0FBQyxFQUFFLEdBQUcsTUFBTTtRQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM1QjtLQUNGOzs7O0lBRUQsVUFBVTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUN6QixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNYLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDN0IsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxRQUFRO1FBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3pCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO2FBQ2pELEdBQUcsQ0FBQyxDQUFDLE9BQW1CLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2xEOzs7WUE1Q0YsVUFBVTs7Ozs0Q0FTSSxNQUFNLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeVJlZiB9IGZyb20gJy4vZ2FsbGVyeS1yZWYnO1xyXG5pbXBvcnQgeyBHQUxMRVJZX0NPTkZJRyB9IGZyb20gJy4uL3V0aWxzL2dhbGxlcnkudG9rZW4nO1xyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvZ2FsbGVyeS5kZWZhdWx0JztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5IHtcclxuXHJcbiAgLyoqIFN0b3JlcyBHYWxsZXJ5UmVmIGluc3RhbmNlcyAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2luc3RhbmNlcyA9IHt9O1xyXG5cclxuICAvKiogR2xvYmFsIGNvbmZpZyAqL1xyXG4gIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChHQUxMRVJZX0NPTkZJRykgY29uZmlnOiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWd9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBHYWxsZXJ5IGJ5IElEXHJcbiAgICovXHJcbiAgcmVmKGlkID0gJ3Jvb3QnLCBjb25maWc/OiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzW2lkXSBpbnN0YW5jZW9mIEdhbGxlcnlSZWYpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25maWcgPSB7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ307XHJcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXNbaWRdID0gbmV3IEdhbGxlcnlSZWYoY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3koaWQgPSAncm9vdCcpIHtcclxuICAgIGlmICh0aGlzLl9pbnN0YW5jZXNbaWRdIGluc3RhbmNlb2YgR2FsbGVyeVJlZikge1xyXG4gICAgICB0aGlzLl9pbnN0YW5jZXNbaWRdLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5faW5zdGFuY2VzW2lkXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95QWxsKCkge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VzKVxyXG4gICAgICAubWFwKChrZXkpID0+IHtcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZXNba2V5XS5kZXN0b3J5KCk7XHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzW2tleV0gPSBudWxsO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2V0QWxsKCkge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VzKVxyXG4gICAgICAubWFwKChpZCA9ICdyb290JykgPT4gdGhpcy5faW5zdGFuY2VzW2lkXS5nYWxsZXJ5KVxyXG4gICAgICAubWFwKChnYWxsZXJ5OiBHYWxsZXJ5UmVmKSA9PiBnYWxsZXJ5LnJlc2V0KCkpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19