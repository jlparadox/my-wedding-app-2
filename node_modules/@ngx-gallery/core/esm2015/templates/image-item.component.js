/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Gallery } from '../services/gallery.service';
export class ImageItemComponent {
    /**
     * @param {?} gallery
     * @param {?} sanitizer
     */
    constructor(gallery, sanitizer) {
        this.gallery = gallery;
        this.sanitizer = sanitizer;
    }
}
ImageItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'image-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: `
    <div [lazyImage]="data?.src" (loading)="loading = $event"></div>
    <i class="g-loading" *ngIf="loading" [innerHTML]="sanitizer.bypassSecurityTrustHtml(gallery.config.loadingIcon)"></i>
  `,
                styles: [`
    :host {
      position: relative;
      display: block;
      width: 100%;
      height: 100%;
    }
    div {
      background-position: center center;
      background-size: cover;
      width: 100%;
      height: 100%;
    }
  `],
            },] },
];
/** @nocollapse */
ImageItemComponent.ctorParameters = () => [
    { type: Gallery, },
    { type: DomSanitizer, },
];
ImageItemComponent.propDecorators = {
    "data": [{ type: Input },],
};
function ImageItemComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageItemComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageItemComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ImageItemComponent.propDecorators;
    /** @type {?} */
    ImageItemComponent.prototype.loading;
    /** @type {?} */
    ImageItemComponent.prototype.data;
    /** @type {?} */
    ImageItemComponent.prototype.gallery;
    /** @type {?} */
    ImageItemComponent.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbInRlbXBsYXRlcy9pbWFnZS1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQXlCdEQsTUFBTTs7Ozs7SUFLSixZQUFtQixPQUFnQixFQUFTLFNBQXVCO1FBQWhELFlBQU8sR0FBUCxPQUFPLENBQVM7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFjO0tBQ2xFOzs7WUE3QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsUUFBUSxFQUFFOzs7R0FHVDtnQkFDRCxNQUFNLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7OztHQWFSLENBQUM7YUFDSDs7OztZQXhCUSxPQUFPO1lBRlAsWUFBWTs7O3FCQThCbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IEdhbGxlcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy9nYWxsZXJ5LnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdpbWFnZS1pdGVtJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbbGF6eUltYWdlXT1cImRhdGE/LnNyY1wiIChsb2FkaW5nKT1cImxvYWRpbmcgPSAkZXZlbnRcIj48L2Rpdj5cclxuICAgIDxpIGNsYXNzPVwiZy1sb2FkaW5nXCIgKm5nSWY9XCJsb2FkaW5nXCIgW2lubmVySFRNTF09XCJzYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoZ2FsbGVyeS5jb25maWcubG9hZGluZ0ljb24pXCI+PC9pPlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbYFxyXG4gICAgOmhvc3Qge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgfVxyXG4gICAgZGl2IHtcclxuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuICBgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEltYWdlSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIEdhbGxlcnlJdGVtQ29tcG9uZW50IHtcclxuXHJcbiAgbG9hZGluZzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBkYXRhOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBnYWxsZXJ5OiBHYWxsZXJ5LCBwdWJsaWMgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcbn1cclxuIl19