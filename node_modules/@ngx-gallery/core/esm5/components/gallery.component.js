/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ChangeDetectionStrategy, EventEmitter } from '@angular/core';
import { Gallery } from '../services/gallery.service';
import { GalleryRef } from '../services/gallery-ref';
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(_gallery) {
        this._gallery = _gallery;
        this.gestures = this._gallery.config.gestures;
        this.panSensitivity = this._gallery.config.panSensitivity;
        this.zoomOut = this._gallery.config.zoomOut;
        this.dots = this._gallery.config.dots;
        this.thumb = this._gallery.config.thumb;
        this.nav = this._gallery.config.nav;
        this.counter = this._gallery.config.counter;
        this.thumbWidth = this._gallery.config.thumbWidth;
        this.thumbHeight = this._gallery.config.thumbHeight;
        this.disableThumb = this._gallery.config.disableThumb;
        this.thumbPosition = this._gallery.config.thumbPosition;
        this.slidingDirection = this._gallery.config.slidingDirection;
        this.destroyRef = true;
        this.indexChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GalleryComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return {
            gestures: this.gestures,
            panSensitivity: this.panSensitivity,
            zoomOut: this.zoomOut,
            counter: this.counter,
            nav: this.nav,
            dots: this.dots,
            thumb: this.thumb,
            thumbWidth: this.thumbWidth,
            thumbHeight: this.thumbHeight,
            thumbPosition: this.thumbPosition,
            disableThumb: this.disableThumb,
            slidingDirection: this.slidingDirection
        };
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.onIndexChange = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        switch (i) {
            case 'next':
                this.galleryRef.next();
                break;
            case 'prev':
                this.galleryRef.prev();
                break;
            default:
                this.galleryRef.set(i);
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.galleryRef instanceof GalleryRef) {
            this.galleryRef.setConfig(this.getConfig());
            if (this.items !== this.galleryRef.state.items) {
                this.load(this.items);
            }
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Get gallery instance by id
        this.galleryRef = this._gallery.ref(this.id);
        this.galleryRef.setConfig(this.getConfig());
        this.load(this.items);
        /** Subscribes to indexChange and itemsChange events when user bind them */
        if (this.indexChange.observers.length) {
            this._indexChange$ = this.galleryRef.indexChanged().subscribe(function (e) { return _this.indexChange.next(e); });
        }
        if (this.itemsChange.observers.length) {
            this._itemChange$ = this.galleryRef.itemsChanged().subscribe(function (e) { return _this.itemsChange.next(e); });
        }
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._indexChange$) {
            this._indexChange$.unsubscribe();
        }
        if (this._itemChange$) {
            this._itemChange$.unsubscribe();
        }
        if (this.destroyRef) {
            this.galleryRef.reset();
        }
    };
    /**
     * @param {?} items
     * @return {?}
     */
    GalleryComponent.prototype.load = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.galleryRef.load(items);
    };
    /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    GalleryComponent.prototype.add = /**
     * @param {?} item
     * @param {?=} active
     * @return {?}
     */
    function (item, active) {
        this.galleryRef.add(item, active);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.remove = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.remove(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.galleryRef.next();
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.galleryRef.prev();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    GalleryComponent.prototype.set = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.galleryRef.set(i);
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.galleryRef.reset();
    };
    GalleryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-core [state]=\"galleryRef.state$ | async\"\n                  [config]=\"galleryRef.config$ | async\"\n                  (indexChange)=\"onIndexChange($event)\"></gallery-core>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryComponent.ctorParameters = function () { return [
        { type: Gallery, },
    ]; };
    GalleryComponent.propDecorators = {
        "id": [{ type: Input },],
        "items": [{ type: Input },],
        "gestures": [{ type: Input },],
        "panSensitivity": [{ type: Input },],
        "zoomOut": [{ type: Input },],
        "dots": [{ type: Input },],
        "thumb": [{ type: Input },],
        "nav": [{ type: Input },],
        "counter": [{ type: Input },],
        "thumbWidth": [{ type: Input },],
        "thumbHeight": [{ type: Input },],
        "disableThumb": [{ type: Input },],
        "thumbPosition": [{ type: Input },],
        "slidingDirection": [{ type: Input },],
        "destroyRef": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "itemsChange": [{ type: Output },],
    };
    return GalleryComponent;
}());
export { GalleryComponent };
function GalleryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GalleryComponent.propDecorators;
    /** @type {?} */
    GalleryComponent.prototype.galleryRef;
    /** @type {?} */
    GalleryComponent.prototype.id;
    /** @type {?} */
    GalleryComponent.prototype.items;
    /** @type {?} */
    GalleryComponent.prototype.gestures;
    /** @type {?} */
    GalleryComponent.prototype.panSensitivity;
    /** @type {?} */
    GalleryComponent.prototype.zoomOut;
    /** @type {?} */
    GalleryComponent.prototype.dots;
    /** @type {?} */
    GalleryComponent.prototype.thumb;
    /** @type {?} */
    GalleryComponent.prototype.nav;
    /** @type {?} */
    GalleryComponent.prototype.counter;
    /** @type {?} */
    GalleryComponent.prototype.thumbWidth;
    /** @type {?} */
    GalleryComponent.prototype.thumbHeight;
    /** @type {?} */
    GalleryComponent.prototype.disableThumb;
    /** @type {?} */
    GalleryComponent.prototype.thumbPosition;
    /** @type {?} */
    GalleryComponent.prototype.slidingDirection;
    /** @type {?} */
    GalleryComponent.prototype.destroyRef;
    /** @type {?} */
    GalleryComponent.prototype.indexChange;
    /** @type {?} */
    GalleryComponent.prototype.itemsChange;
    /** @type {?} */
    GalleryComponent.prototype._itemChange$;
    /** @type {?} */
    GalleryComponent.prototype._indexChange$;
    /** @type {?} */
    GalleryComponent.prototype._gallery;
}

//# sourceMappingURL=data:application/json;base64,