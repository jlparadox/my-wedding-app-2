/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ChangeDetectionStrategy, ElementRef, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { debounceTime } from 'rxjs/operators/debounceTime';
var GallerySliderComponent = /** @class */ (function () {
    function GallerySliderComponent(_el, platform) {
        var _this = this;
        this._el = _el;
        this.platform = platform;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.sliderState$ = this.stateStream$.pipe(map(function (state) {
            return ({
                style: _this.sliderStyle(state.value),
                active: state.active
            });
        }));
    }
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.viewDepth = /**
     * @return {?}
     */
    function () {
        return { transform: "perspective(50px) translate3d(0, 0, " + -this.config.zoomOut + "px)" };
    };
    /**
     * @param {?} delta
     * @return {?}
     */
    GallerySliderComponent.prototype.sliderStyle = /**
     * @param {?} delta
     * @return {?}
     */
    function (delta) {
        switch (this.config.slidingDirection) {
            case 'horizontal':
                return {
                    transform: "translate3d(" + (-(this.state.currIndex * this._el.nativeElement.offsetWidth) + delta) + "px, 0, 0)",
                    width: this._el.nativeElement.offsetWidth * this.state.items.length + 'px',
                    height: '100%'
                };
            case 'vertical':
                return {
                    transform: "translate3d(0, " + (-(this.state.currIndex * this._el.nativeElement.offsetHeight) + delta) + "px, 0)",
                    width: '100%',
                    height: this._el.nativeElement.offsetHeight * this.state.items.length + 'px',
                };
        }
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', function (e) {
                switch (_this.config.slidingDirection) {
                    case 'horizontal':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                        break;
                    case 'vertical':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                }
            });
        }
        // Rearrange slider on window resize
        if (isPlatformBrowser(this.platform)) {
            this.resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(function () { return _this.stateStream$.next(_this.stateStream$.getValue()); })).subscribe();
        }
        // Fix wrong slider width on init
        setTimeout(function () {
            _this.stateStream$.next({ value: 0, active: false });
        }, 300);
    };
    /**
     * @return {?}
     */
    GallerySliderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        if (this.resizeSub$) {
            this.resizeSub$.unsubscribe();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GallerySliderComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GallerySliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"slides-container\"\n         [ngStyle]=\"viewDepth()\">\n      <div class=\"slides\"\n           [class.-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n        <div *ngFor=\"let item of state.items\" class=\"slide\">\n          <ng-container [item]=\"item\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  "
                },] },
    ];
    /** @nocollapse */
    GallerySliderComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    GallerySliderComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "width": [{ type: Input },],
        "height": [{ type: Input },],
        "indexChange": [{ type: Output },],
    };
    return GallerySliderComponent;
}());
export { GallerySliderComponent };
function GallerySliderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GallerySliderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GallerySliderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GallerySliderComponent.propDecorators;
    /** @type {?} */
    GallerySliderComponent.prototype.mc;
    /** @type {?} */
    GallerySliderComponent.prototype.resizeSub$;
    /** @type {?} */
    GallerySliderComponent.prototype.sliderState$;
    /** @type {?} */
    GallerySliderComponent.prototype.stateStream$;
    /** @type {?} */
    GallerySliderComponent.prototype.state;
    /** @type {?} */
    GallerySliderComponent.prototype.config;
    /** @type {?} */
    GallerySliderComponent.prototype.width;
    /** @type {?} */
    GallerySliderComponent.prototype.height;
    /** @type {?} */
    GallerySliderComponent.prototype.indexChange;
    /** @type {?} */
    GallerySliderComponent.prototype._el;
    /** @type {?} */
    GallerySliderComponent.prototype.platform;
}

//# sourceMappingURL=data:application/json;base64,