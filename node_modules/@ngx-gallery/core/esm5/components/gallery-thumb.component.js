/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ChangeDetectionStrategy, ElementRef, EventEmitter, HostBinding } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
var GalleryThumbComponent = /** @class */ (function () {
    function GalleryThumbComponent(_el) {
        var _this = this;
        this._el = _el;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.thumbState$ = this.stateStream$.pipe(map(function (state) {
            return ({
                style: _this.thumbsStyle(state.value),
                active: state.active
            });
        }));
    }
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            // Slides thumbnails
            this.mc.on('pan', function (e) {
                switch (_this.config.thumbPosition) {
                    case 'right':
                    case 'left':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                        break;
                    case 'top':
                    case 'bottom':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                }
            });
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
    };
    /**
     * @param {?} delta
     * @return {?}
     */
    GalleryThumbComponent.prototype.thumbsStyle = /**
     * @param {?} delta
     * @return {?}
     */
    function (delta) {
        var /** @type {?} */ value;
        switch (this.config.thumbPosition) {
            case 'top':
            case 'bottom':
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - delta);
                return {
                    transform: "translate3d(" + value + "px, 0, 0)",
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case 'left':
            case 'right':
                this.width = this.config.thumbWidth + 'px';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - delta);
                return {
                    transform: "translate3d(0, " + value + "px, 0)",
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px',
                };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GalleryThumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-thumb',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <div *ngIf=\"thumbState$ | async; let thumbState\"\n         class=\"g-thumb-container\">\n      <div class=\"g-thumbs\"\n           [class.-no-transition]=\"thumbState.active\"\n           [ngStyle]=\"thumbState.style\">\n        <div *ngFor=\"let item of state.items;let i = index\"\n             class=\"g-thumb\"\n             [class.-current]=\"i === state.currIndex\"\n             (tapClick)=\"indexChange.emit(i)\"\n             [tapClickDisabled]=\"config.disableThumb\">\n          <ng-container [item]=\"item\" type=\"thumb\"></ng-container>\n        </div>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryThumbComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    GalleryThumbComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "height": [{ type: HostBinding, args: ['style.height',] },],
        "width": [{ type: HostBinding, args: ['style.width',] },],
    };
    return GalleryThumbComponent;
}());
export { GalleryThumbComponent };
function GalleryThumbComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryThumbComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryThumbComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GalleryThumbComponent.propDecorators;
    /** @type {?} */
    GalleryThumbComponent.prototype.mc;
    /** @type {?} */
    GalleryThumbComponent.prototype.thumbState$;
    /** @type {?} */
    GalleryThumbComponent.prototype.stateStream$;
    /** @type {?} */
    GalleryThumbComponent.prototype.state;
    /** @type {?} */
    GalleryThumbComponent.prototype.config;
    /** @type {?} */
    GalleryThumbComponent.prototype.indexChange;
    /** @type {?} */
    GalleryThumbComponent.prototype.height;
    /** @type {?} */
    GalleryThumbComponent.prototype.width;
    /** @type {?} */
    GalleryThumbComponent.prototype._el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS10aHVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ2FsbGVyeS10aHVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFJTix1QkFBdUIsRUFDdkIsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFvQ3ZDLCtCQUFvQixHQUFlO1FBQW5DLGlCQU1DO1FBTm1CLFFBQUcsR0FBSCxHQUFHLENBQVk7NEJBUHBCLElBQUksZUFBZSxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7MkJBR3JDLElBQUksWUFBWSxFQUFtQjtRQUt6RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUN2QyxHQUFHLENBQUMsVUFBQyxLQUFVO1lBQUssT0FBQSxDQUFDO2dCQUNuQixLQUFLLEVBQUUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2dCQUNwQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07YUFDckIsQ0FBQztRQUhrQixDQUdsQixDQUFDLENBQUMsQ0FBQztLQUNSOzs7O0lBRUQsMkNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0tBQ25EOzs7O0lBRUQsd0NBQVE7OztJQUFSO1FBQUEsaUJBMkJDO1FBMUJDLEVBQUUsQ0FBQyxD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QjtZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUN6RyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0M7U0FDRjtLQUNGOztnQkFySUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsbUJBQW1CLEVBQUUsS0FBSztvQkFDMUIsUUFBUSxFQUFFLDhsQkFlVDtpQkFDRjs7OztnQkFoQ0MsVUFBVTs7OzBCQXNDVCxLQUFLOzJCQUNMLEtBQUs7Z0NBQ0wsTUFBTTsyQkFDTixXQUFXLFNBQUMsY0FBYzswQkFDMUIsV0FBVyxTQUFDLGFBQWE7O2dDQWxENUI7O1NBeUNhLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgT25Jbml0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBIb3N0QmluZGluZ1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnLCBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcy9CZWhhdmlvclN1YmplY3QnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvbWFwJztcclxuXHJcbmRlY2xhcmUgY29uc3QgSGFtbWVyOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktdGh1bWInLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2ICpuZ0lmPVwidGh1bWJTdGF0ZSQgfCBhc3luYzsgbGV0IHRodW1iU3RhdGVcIlxyXG4gICAgICAgICBjbGFzcz1cImctdGh1bWItY29udGFpbmVyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJnLXRodW1ic1wiXHJcbiAgICAgICAgICAgW2NsYXNzLi1uby10cmFuc2l0aW9uXT1cInRodW1iU3RhdGUuYWN0aXZlXCJcclxuICAgICAgICAgICBbbmdTdHlsZV09XCJ0aHVtYlN0YXRlLnN0eWxlXCI+XHJcbiAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcztsZXQgaSA9IGluZGV4XCJcclxuICAgICAgICAgICAgIGNsYXNzPVwiZy10aHVtYlwiXHJcbiAgICAgICAgICAgICBbY2xhc3MuLWN1cnJlbnRdPVwiaSA9PT0gc3RhdGUuY3VyckluZGV4XCJcclxuICAgICAgICAgICAgICh0YXBDbGljayk9XCJpbmRleENoYW5nZS5lbWl0KGkpXCJcclxuICAgICAgICAgICAgIFt0YXBDbGlja0Rpc2FibGVkXT1cImNvbmZpZy5kaXNhYmxlVGh1bWJcIj5cclxuICAgICAgICAgIDxuZy1jb250YWluZXIgW2l0ZW1dPVwiaXRlbVwiIHR5cGU9XCJ0aHVtYlwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlUaHVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICBtYzogYW55O1xyXG4gIHRodW1iU3RhdGUkOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgc3RhdGVTdHJlYW0kID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7dmFsdWU6IDAsIGFjdGl2ZTogZmFsc2V9KTtcclxuICBASW5wdXQoKSBzdGF0ZTogR2FsbGVyeVN0YXRlO1xyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuICBAT3V0cHV0KCkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj4oKTtcclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodCcpIGhlaWdodDtcclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoJykgd2lkdGg7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLnRodW1iU3RhdGUkID0gdGhpcy5zdGF0ZVN0cmVhbSQucGlwZShcclxuICAgICAgbWFwKChzdGF0ZTogYW55KSA9PiAoe1xyXG4gICAgICAgIHN0eWxlOiB0aGlzLnRodW1ic1N0eWxlKHN0YXRlLnZhbHVlKSxcclxuICAgICAgICBhY3RpdmU6IHN0YXRlLmFjdGl2ZVxyXG4gICAgICB9KSkpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICB0aGlzLnN0YXRlU3RyZWFtJC5uZXh0KHt2YWx1ZTogMCwgYWN0aXZlOiBmYWxzZX0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5jb25maWcuZ2VzdHVyZXMgJiYgIXRoaXMuY29uZmlnLmRpc2FibGVUaHVtYiAmJiB0eXBlb2YgSGFtbWVyICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgICAgdGhpcy5tYyA9IG5ldyBIYW1tZXIodGhpcy5fZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMubWMuZ2V0KCdwYW4nKS5zZXQoe2RpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9BTEx9KTtcclxuXHJcbiAgICAgIC8vIFNsaWRlcyB0aHVtYm5haWxzXHJcbiAgICAgIHRoaXMubWMub24oJ3BhbicsIChlKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmNvbmZpZy50aHVtYlBvc2l0aW9uKSB7XHJcbiAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZVN0cmVhbSQubmV4dCh7dmFsdWU6IGUuZGVsdGFZLCBhY3RpdmU6IHRydWV9KTtcclxuICAgICAgICAgICAgaWYgKGUuaXNGaW5hbCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGVTdHJlYW0kLm5leHQoe3ZhbHVlOiAwLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFBhbihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlU3RyZWFtJC5uZXh0KHt2YWx1ZTogZS5kZWx0YVgsIGFjdGl2ZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICBpZiAoZS5pc0ZpbmFsKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZVN0cmVhbSQubmV4dCh7dmFsdWU6IDAsIGFjdGl2ZTogZmFsc2V9KTtcclxuICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxQYW4oZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5tYykge1xyXG4gICAgICB0aGlzLm1jLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRodW1ic1N0eWxlKGRlbHRhOiBudW1iZXIpIHtcclxuICAgIGxldCB2YWx1ZTogbnVtYmVyO1xyXG4gICAgc3dpdGNoICh0aGlzLmNvbmZpZy50aHVtYlBvc2l0aW9uKSB7XHJcbiAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNvbmZpZy50aHVtYkhlaWdodCArICdweCc7XHJcbiAgICAgICAgdmFsdWUgPSAtKHRoaXMuc3RhdGUuY3VyckluZGV4ICogdGhpcy5jb25maWcudGh1bWJXaWR0aCkgLSAodGhpcy5jb25maWcudGh1bWJXaWR0aCAvIDIgLSBkZWx0YSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7dmFsdWV9cHgsIDAsIDApYCxcclxuICAgICAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAqIHRoaXMuY29uZmlnLnRodW1iV2lkdGggKyAncHgnLFxyXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJSdcclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmNvbmZpZy50aHVtYldpZHRoICsgJ3B4JztcclxuICAgICAgICB2YWx1ZSA9IC0odGhpcy5zdGF0ZS5jdXJySW5kZXggKiB0aGlzLmNvbmZpZy50aHVtYkhlaWdodCkgLSAodGhpcy5jb25maWcudGh1bWJIZWlnaHQgLyAyIC0gZGVsdGEpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCgwLCAke3ZhbHVlfXB4LCAwKWAsXHJcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgaGVpZ2h0OiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAqIHRoaXMuY29uZmlnLnRodW1iSGVpZ2h0ICsgJ3B4JyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmVydGljYWxQYW4oZSkge1xyXG4gICAgaWYgKGUudmVsb2NpdHlZID4gMC4zKSB7XHJcbiAgICAgIHRoaXMuaW5kZXhDaGFuZ2UuZW1pdCgncHJldicpO1xyXG4gICAgfSBlbHNlIGlmIChlLnZlbG9jaXR5WSA8IC0wLjMpIHtcclxuICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KCduZXh0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZS5kZWx0YVkgLyAyIDw9IC10aGlzLmNvbmZpZy50aHVtYkhlaWdodCAqIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoIC8gdGhpcy5jb25maWcucGFuU2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICB0aGlzLmluZGV4Q2hhbmdlLmVtaXQoJ25leHQnKTtcclxuICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWSAvIDIgPj0gdGhpcy5jb25maWcudGh1bWJIZWlnaHQgKiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAvIHRoaXMuY29uZmlnLnBhblNlbnNpdGl2aXR5KSB7XHJcbiAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KCdwcmV2Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KHRoaXMuc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaG9yaXpvbnRhbFBhbihlKSB7XHJcbiAgICBpZiAoZS52ZWxvY2l0eVggPiAwLjMpIHtcclxuICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KCdwcmV2Jyk7XHJcbiAgICB9IGVsc2UgaWYgKGUudmVsb2NpdHlYIDwgLTAuMykge1xyXG4gICAgICB0aGlzLmluZGV4Q2hhbmdlLmVtaXQoJ25leHQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChlLmRlbHRhWCAvIDIgPD0gLXRoaXMuY29uZmlnLnRodW1iV2lkdGggKiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAvIHRoaXMuY29uZmlnLnBhblNlbnNpdGl2aXR5KSB7XHJcbiAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KCduZXh0Jyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZS5kZWx0YVggLyAyID49IHRoaXMuY29uZmlnLnRodW1iV2lkdGggKiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAvIHRoaXMuY29uZmlnLnBhblNlbnNpdGl2aXR5KSB7XHJcbiAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KCdwcmV2Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pbmRleENoYW5nZS5lbWl0KHRoaXMuc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19