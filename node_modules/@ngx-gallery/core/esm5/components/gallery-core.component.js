/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, HostBinding, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
var GalleryCoreComponent = /** @class */ (function () {
    function GalleryCoreComponent() {
        this.indexChange = new EventEmitter();
    }
    Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
        get: /**
         * Set thumbnails position ('top' | 'left' | 'right' | 'bottom')
         * @return {?}
         */
        function () {
            return this.config.thumbPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
        get: /**
         * Set thumbnails position ('horizontal' | 'vertical')
         * @return {?}
         */
        function () {
            return this.config.slidingDirection;
        },
        enumerable: true,
        configurable: true
    });
    GalleryCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    template: "\n    <gallery-thumb *ngIf=\"config.thumb\"\n                  [state]=\"state\"\n                  [config]=\"config\"\n                  (indexChange)=\"indexChange.emit($event)\">\n    </gallery-thumb>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (indexChange)=\"indexChange.emit($event)\">\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (indexChange)=\"indexChange.emit($event)\">\n        </gallery-nav>\n      </gallery-slider>\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (indexChange)=\"indexChange.emit($event)\">\n      </gallery-dots>\n      <gallery-counter *ngIf=\"config.counter\"\n                      [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    GalleryCoreComponent.ctorParameters = function () { return []; };
    GalleryCoreComponent.propDecorators = {
        "state": [{ type: Input },],
        "config": [{ type: Input },],
        "indexChange": [{ type: Output },],
        "thumbPosition": [{ type: HostBinding, args: ['attr.thumbPosition',] },],
        "slidingDirection": [{ type: HostBinding, args: ['attr.slidingDirection',] },],
    };
    return GalleryCoreComponent;
}());
export { GalleryCoreComponent };
function GalleryCoreComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryCoreComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryCoreComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GalleryCoreComponent.propDecorators;
    /** @type {?} */
    GalleryCoreComponent.prototype.state;
    /** @type {?} */
    GalleryCoreComponent.prototype.config;
    /** @type {?} */
    GalleryCoreComponent.prototype.indexChange;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9nYWxsZXJ5LWNvcmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OzJCQXFDbkYsSUFBSSxZQUFZLEVBQW1COzswQkFHcEIsK0NBQWE7Ozs7OztZQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7Ozs7OzBCQUlPLGtEQUFnQjs7Ozs7O1lBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDOzs7Ozs7Z0JBM0N2QyxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxtQkFBbUIsRUFBRSxLQUFLO29CQUMxQixRQUFRLEVBQUUsczdCQXdCVDtpQkFDRjs7Ozs7MEJBR0UsS0FBSzsyQkFDTCxLQUFLO2dDQUNMLE1BQU07a0NBR04sV0FBVyxTQUFDLG9CQUFvQjtxQ0FLaEMsV0FBVyxTQUFDLHVCQUF1Qjs7K0JBN0N0Qzs7U0FpQ2Esb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnLCBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LWNvcmUnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8Z2FsbGVyeS10aHVtYiAqbmdJZj1cImNvbmZpZy50aHVtYlwiXHJcbiAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgKGluZGV4Q2hhbmdlKT1cImluZGV4Q2hhbmdlLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgPC9nYWxsZXJ5LXRodW1iPlxyXG4gICAgPGRpdiBjbGFzcz1cImctYm94XCI+XHJcbiAgICAgIDxnYWxsZXJ5LXNsaWRlciBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgKGluZGV4Q2hhbmdlKT1cImluZGV4Q2hhbmdlLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgICAgIDxnYWxsZXJ5LW5hdiAqbmdJZj1cImNvbmZpZy5uYXYgJiYgc3RhdGUuaXRlbXMubGVuZ3RoID4gMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCJcclxuICAgICAgICAgICAgICAgICAgICBbY29uZmlnXT1cImNvbmZpZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgKGluZGV4Q2hhbmdlKT1cImluZGV4Q2hhbmdlLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgICAgIDwvZ2FsbGVyeS1uYXY+XHJcbiAgICAgIDwvZ2FsbGVyeS1zbGlkZXI+XHJcbiAgICAgIDxnYWxsZXJ5LWRvdHMgKm5nSWY9XCJjb25maWcuZG90c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAoaW5kZXhDaGFuZ2UpPVwiaW5kZXhDaGFuZ2UuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgIDwvZ2FsbGVyeS1kb3RzPlxyXG4gICAgICA8Z2FsbGVyeS1jb3VudGVyICpuZ0lmPVwiY29uZmlnLmNvdW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCI+XHJcbiAgICAgIDwvZ2FsbGVyeS1jb3VudGVyPlxyXG4gICAgPC9kaXY+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeUNvcmVDb21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSBzdGF0ZTogR2FsbGVyeVN0YXRlO1xyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuICBAT3V0cHV0KCkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj4oKTtcclxuXHJcbiAgLyoqIFNldCB0aHVtYm5haWxzIHBvc2l0aW9uICgndG9wJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAnYm90dG9tJykgKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIudGh1bWJQb3NpdGlvbicpIGdldCB0aHVtYlBvc2l0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnRodW1iUG9zaXRpb247XHJcbiAgfVxyXG5cclxuICAvKiogU2V0IHRodW1ibmFpbHMgcG9zaXRpb24gKCdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcpICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnNsaWRpbmdEaXJlY3Rpb24nKSBnZXQgc2xpZGluZ0RpcmVjdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zbGlkaW5nRGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbn1cclxuIl19