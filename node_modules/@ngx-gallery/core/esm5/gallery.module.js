/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Gallery } from './services/gallery.service';
import { GALLERY_CONFIG } from './utils/gallery.token';
import { GalleryComponent } from './components/gallery.component';
import { GalleryCoreComponent } from './components/gallery-core.component';
import { GalleryNavComponent } from './components/gallery-nav.component';
import { GalleryThumbComponent } from './components/gallery-thumb.component';
import { GalleryDotsComponent } from './components/gallery-dots.component';
import { GallerySliderComponent } from './components/gallery-slider.component';
import { GalleryCounterComponent } from './components/gallery-counter.component';
import { LazyDirective } from './directives/lazy.directive';
import { TapClickDirective } from './directives/tap-click.directive';
import { GalleryItemDirective } from './directives/gallery-item.directive';
import { ImageItemComponent } from './templates/image-item.component';
import { VideoItemComponent } from './templates/video-item.component';
import { IframeItemComponent } from './templates/iframe-item.component';
import { ThumbnailItemComponent } from './templates/thumbnail-item.component';
/**
 * @param {?} galleryConfig
 * @return {?}
 */
export function galleryFactory(galleryConfig) {
    return new Gallery(galleryConfig);
}
var GalleryModule = /** @class */ (function () {
    function GalleryModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    GalleryModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: GalleryModule,
            providers: [
                {
                    provide: GALLERY_CONFIG,
                    useValue: config
                },
                {
                    provide: Gallery,
                    useFactory: galleryFactory,
                    deps: [GALLERY_CONFIG]
                }
            ]
        };
    };
    GalleryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        GalleryComponent,
                        GalleryCoreComponent,
                        GalleryNavComponent,
                        GalleryThumbComponent,
                        GalleryDotsComponent,
                        GallerySliderComponent,
                        GalleryCounterComponent,
                        ImageItemComponent,
                        VideoItemComponent,
                        IframeItemComponent,
                        ThumbnailItemComponent,
                        GalleryItemDirective,
                        LazyDirective,
                        TapClickDirective
                    ],
                    exports: [
                        GalleryComponent,
                        LazyDirective,
                        TapClickDirective
                    ],
                    entryComponents: [
                        IframeItemComponent,
                        ImageItemComponent,
                        VideoItemComponent,
                        ThumbnailItemComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    GalleryModule.ctorParameters = function () { return []; };
    return GalleryModule;
}());
export { GalleryModule };
function GalleryModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GalleryModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GalleryModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImdhbGxlcnkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWtCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXJELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUVqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7O0FBRTlFLE1BQU0seUJBQXlCLGFBQTRCO0lBQ3pELE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNuQzs7Ozs7Ozs7SUFtQ1EscUJBQU87Ozs7SUFBZCxVQUFlLE1BQXNCO1FBRW5DLE1BQU0sQ0FBQztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsUUFBUSxFQUFFLE1BQU07aUJBQ2pCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxPQUFPO29CQUNoQixVQUFVLEVBQUUsY0FBYztvQkFDMUIsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDO2lCQUN2QjthQUNGO1NBQ0YsQ0FBQztLQUNIOztnQkFqREYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELFlBQVksRUFBRTt3QkFDWixnQkFBZ0I7d0JBQ2hCLG9CQUFvQjt3QkFDcEIsbUJBQW1CO3dCQUNuQixxQkFBcUI7d0JBQ3JCLG9CQUFvQjt3QkFDcEIsc0JBQXNCO3dCQUN0Qix1QkFBdUI7d0JBQ3ZCLGtCQUFrQjt3QkFDbEIsa0JBQWtCO3dCQUNsQixtQkFBbUI7d0JBQ25CLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3dCQUNwQixhQUFhO3dCQUNiLGlCQUFpQjtxQkFDbEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjt3QkFDaEIsYUFBYTt3QkFDYixpQkFBaUI7cUJBQ2xCO29CQUNELGVBQWUsRUFBRTt3QkFDZixtQkFBbUI7d0JBQ25CLGtCQUFrQjt3QkFDbEIsa0JBQWtCO3dCQUNsQixzQkFBc0I7cUJBQ3ZCO2lCQUNGOzs7O3dCQTFERDs7U0EyRGEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeSB9IGZyb20gJy4vc2VydmljZXMvZ2FsbGVyeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgR0FMTEVSWV9DT05GSUcgfSBmcm9tICcuL3V0aWxzL2dhbGxlcnkudG9rZW4nO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nYWxsZXJ5LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb3JlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktY29yZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5TmF2Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktbmF2LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlUaHVtYkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9nYWxsZXJ5LXRodW1iLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlEb3RzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktZG90cy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5U2xpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktc2xpZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb3VudGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dhbGxlcnktY291bnRlci5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgTGF6eURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9sYXp5LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRhcENsaWNrRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3RhcC1jbGljay5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nYWxsZXJ5LWl0ZW0uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgSW1hZ2VJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi90ZW1wbGF0ZXMvaW1hZ2UtaXRlbS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWaWRlb0l0ZW1Db21wb25lbnQgfSBmcm9tICcuL3RlbXBsYXRlcy92aWRlby1pdGVtLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IElmcmFtZUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3RlbXBsYXRlcy9pZnJhbWUtaXRlbS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUaHVtYm5haWxJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi90ZW1wbGF0ZXMvdGh1bWJuYWlsLWl0ZW0uY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnYWxsZXJ5RmFjdG9yeShnYWxsZXJ5Q29uZmlnOiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgcmV0dXJuIG5ldyBHYWxsZXJ5KGdhbGxlcnlDb25maWcpO1xyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBHYWxsZXJ5Q29tcG9uZW50LFxyXG4gICAgR2FsbGVyeUNvcmVDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5TmF2Q29tcG9uZW50LFxyXG4gICAgR2FsbGVyeVRodW1iQ29tcG9uZW50LFxyXG4gICAgR2FsbGVyeURvdHNDb21wb25lbnQsXHJcbiAgICBHYWxsZXJ5U2xpZGVyQ29tcG9uZW50LFxyXG4gICAgR2FsbGVyeUNvdW50ZXJDb21wb25lbnQsXHJcbiAgICBJbWFnZUl0ZW1Db21wb25lbnQsXHJcbiAgICBWaWRlb0l0ZW1Db21wb25lbnQsXHJcbiAgICBJZnJhbWVJdGVtQ29tcG9uZW50LFxyXG4gICAgVGh1bWJuYWlsSXRlbUNvbXBvbmVudCxcclxuICAgIEdhbGxlcnlJdGVtRGlyZWN0aXZlLFxyXG4gICAgTGF6eURpcmVjdGl2ZSxcclxuICAgIFRhcENsaWNrRGlyZWN0aXZlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBHYWxsZXJ5Q29tcG9uZW50LFxyXG4gICAgTGF6eURpcmVjdGl2ZSxcclxuICAgIFRhcENsaWNrRGlyZWN0aXZlXHJcbiAgXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgIElmcmFtZUl0ZW1Db21wb25lbnQsXHJcbiAgICBJbWFnZUl0ZW1Db21wb25lbnQsXHJcbiAgICBWaWRlb0l0ZW1Db21wb25lbnQsXHJcbiAgICBUaHVtYm5haWxJdGVtQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeU1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogR2FsbGVyeUNvbmZpZykge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBHYWxsZXJ5TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBHQUxMRVJZX0NPTkZJRyxcclxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IEdhbGxlcnksXHJcbiAgICAgICAgICB1c2VGYWN0b3J5OiBnYWxsZXJ5RmFjdG9yeSxcclxuICAgICAgICAgIGRlcHM6IFtHQUxMRVJZX0NPTkZJR11cclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==