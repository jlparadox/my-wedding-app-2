/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { switchMap } from 'rxjs/operators/switchMap';
import { tap } from 'rxjs/operators/tap';
import { zip } from 'rxjs/observable/zip';
import { fromEvent } from 'rxjs/observable/fromEvent';
var LazyDirective = /** @class */ (function () {
    function LazyDirective(_el, _renderer) {
        var _this = this;
        this._el = _el;
        this._renderer = _renderer;
        this._worker$ = new Subject();
        this.loading = new EventEmitter();
        var /** @type {?} */ img = new Image();
        this._worker$.pipe(switchMap(function (imageSrc) {
            // Image is loading
            // Image is loading
            _this.loading.emit(true);
            // Stop previously loading
            img.src = imageSrc;
            // Image load success
            var /** @type {?} */ loadSuccess = fromEvent(img, 'load').pipe(tap(function () {
                _this._renderer.setStyle(_this._el.nativeElement, 'backgroundImage', "url(" + imageSrc + ")");
                _this.loading.emit(false);
            }));
            // Image load error
            var /** @type {?} */ loadError = fromEvent(img, 'error').pipe(tap(function () { return _this.loading.emit(false); }));
            return zip(loadSuccess, loadError);
        })).subscribe();
    }
    Object.defineProperty(LazyDirective.prototype, "lazyImage", {
        set: /**
         * @param {?} imagePath
         * @return {?}
         */
        function (imagePath) {
            this.loadImage(imagePath);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} imagePath
     * @return {?}
     */
    LazyDirective.prototype.loadImage = /**
     * @param {?} imagePath
     * @return {?}
     */
    function (imagePath) {
        this._worker$.next(imagePath);
    };
    /**
     * @return {?}
     */
    LazyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._worker$.complete();
    };
    LazyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyImage]'
                },] },
    ];
    /** @nocollapse */
    LazyDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    LazyDirective.propDecorators = {
        "lazyImage": [{ type: Input, args: ['lazyImage',] },],
        "loading": [{ type: Output },],
    };
    return LazyDirective;
}());
export { LazyDirective };
function LazyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    LazyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    LazyDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    LazyDirective.propDecorators;
    /** @type {?} */
    LazyDirective.prototype._worker$;
    /** @type {?} */
    LazyDirective.prototype.loading;
    /** @type {?} */
    LazyDirective.prototype._el;
    /** @type {?} */
    LazyDirective.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWdhbGxlcnkvY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvbGF6eS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7SUFpQnBELHVCQUFvQixHQUFlLEVBQVUsU0FBb0I7UUFBakUsaUJBMEJDO1FBMUJtQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVzt3QkFUOUMsSUFBSSxPQUFPLEVBQUU7dUJBT1osSUFBSSxZQUFZLEVBQVc7UUFHN0MscUJBQU0sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLFNBQVMsQ0FBQyxVQUFDLFFBQWdCOztZQUd6QixBQURBLG1CQUFtQjtZQUNuQixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7WUFHeEIsR0FBRyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7O1lBR25CLHFCQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDN0MsR0FBRyxDQUFDO2dCQUNGLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGlCQUFpQixFQUFFLFNBQU8sUUFBUSxNQUFHLENBQUMsQ0FBQztnQkFDdkYsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUIsQ0FBQyxDQUNILENBQUM7O1lBR0YscUJBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQyxDQUFDO1lBRXBGLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ2Y7MEJBaENHLG9DQUFTOzs7OztrQkFBQyxTQUFTO1lBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Ozs7OztJQWlDNUIsaUNBQVM7Ozs7SUFBVCxVQUFVLFNBQVM7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDL0I7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzFCOztnQkFqREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO2lCQUN4Qjs7OztnQkFqQkMsVUFBVTtnQkFJVixTQUFTOzs7OEJBbUJSLEtBQUssU0FBQyxXQUFXOzRCQUtqQixNQUFNOzt3QkE5QlQ7O1NBb0JhLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgUmVuZGVyZXIyLFxyXG4gIE9uRGVzdHJveVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XHJcblxyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy9zd2l0Y2hNYXAnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy90YXAnO1xyXG5pbXBvcnQgeyB6aXAgfSBmcm9tICdyeGpzL29ic2VydmFibGUvemlwJztcclxuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2Zyb21FdmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tsYXp5SW1hZ2VdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGF6eURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gIC8vIExhenkgbG9hZCB3b3JrZXJcclxuICBwcml2YXRlIF93b3JrZXIkID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgQElucHV0KCdsYXp5SW1hZ2UnKVxyXG4gIHNldCBsYXp5SW1hZ2UoaW1hZ2VQYXRoKSB7XHJcbiAgICB0aGlzLmxvYWRJbWFnZShpbWFnZVBhdGgpO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dCgpIGxvYWRpbmcgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICB0aGlzLl93b3JrZXIkLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoaW1hZ2VTcmM6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgICAvLyBJbWFnZSBpcyBsb2FkaW5nXHJcbiAgICAgICAgdGhpcy5sb2FkaW5nLmVtaXQodHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIFN0b3AgcHJldmlvdXNseSBsb2FkaW5nXHJcbiAgICAgICAgaW1nLnNyYyA9IGltYWdlU3JjO1xyXG5cclxuICAgICAgICAvLyBJbWFnZSBsb2FkIHN1Y2Nlc3NcclxuICAgICAgICBjb25zdCBsb2FkU3VjY2VzcyA9IGZyb21FdmVudChpbWcsICdsb2FkJykucGlwZShcclxuICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsICdiYWNrZ3JvdW5kSW1hZ2UnLCBgdXJsKCR7aW1hZ2VTcmN9KWApO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcuZW1pdChmYWxzZSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEltYWdlIGxvYWQgZXJyb3JcclxuICAgICAgICBjb25zdCBsb2FkRXJyb3IgPSBmcm9tRXZlbnQoaW1nLCAnZXJyb3InKS5waXBlKHRhcCgoKSA9PiB0aGlzLmxvYWRpbmcuZW1pdChmYWxzZSkpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHppcChsb2FkU3VjY2VzcywgbG9hZEVycm9yKTtcclxuICAgICAgfSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkSW1hZ2UoaW1hZ2VQYXRoKSB7XHJcbiAgICB0aGlzLl93b3JrZXIkLm5leHQoaW1hZ2VQYXRoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fd29ya2VyJC5jb21wbGV0ZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19