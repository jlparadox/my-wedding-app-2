/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
var TapClickDirective = /** @class */ (function () {
    function TapClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tapClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTapEvent();
    };
    /** Enable gestures if hammer is loaded */
    /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    TapClickDirective.prototype.setTapEvent = /**
     * Enable gestures if hammer is loaded
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof Hammer !== 'undefined') {
            // Use hammer.js tap event
            this.mc = new Hammer(this.el.nativeElement);
            this.mc.on('tap', function () {
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
        else {
            // Use normal click event
            this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                e.stopPropagation();
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TapClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mc) {
            this.mc.destroy();
        }
        else {
            this.clickListener();
        }
    };
    TapClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tapClick]'
                },] },
    ];
    /** @nocollapse */
    TapClickDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    TapClickDirective.propDecorators = {
        "tapClickDisabled": [{ type: Input },],
        "tapClick": [{ type: Output },],
    };
    return TapClickDirective;
}());
export { TapClickDirective };
function TapClickDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TapClickDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TapClickDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    TapClickDirective.propDecorators;
    /** @type {?} */
    TapClickDirective.prototype.mc;
    /** @type {?} */
    TapClickDirective.prototype.clickListener;
    /** @type {?} */
    TapClickDirective.prototype.tapClickDisabled;
    /** @type {?} */
    TapClickDirective.prototype.tapClick;
    /** @type {?} */
    TapClickDirective.prototype.el;
    /** @type {?} */
    TapClickDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9jb3JlLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy90YXAtY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQWMvRywyQkFBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO3dCQUYxQyxJQUFJLFlBQVksRUFBRTtLQUd0Qzs7OztJQUVELG9DQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNwQjtJQUVELDBDQUEwQzs7Ozs7SUFDMUMsdUNBQVc7Ozs7SUFBWDtRQUFBLGlCQW9CQztRQWxCQyxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDOztZQUdsQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMxQjthQUNGLENBQUMsQ0FBQztTQUNKO1FBQUMsSUFBSSxDQUFDLENBQUM7O1lBRU4sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsVUFBQyxDQUFDO2dCQUMxRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztvQkFDM0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzFCO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7S0FDRjs7OztJQUVELHVDQUFXOzs7SUFBWDtRQUNFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNuQjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0tBQ0Y7O2dCQTlDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCOzs7O2dCQU5tQixVQUFVO2dCQUFrRCxTQUFTOzs7cUNBV3RGLEtBQUs7NkJBQ0wsTUFBTTs7NEJBZlQ7O1NBVWEsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIGVuYWJsZSB0YXAgaWYgSGFtbWVySlMgaXMgbG9hZGVkLCBvdGhlcndpc2UgaXQgZmFsbHMgYmFjayB0byBub3JtYWwgY2xpY2sgZXZlbnQgXHJcbiAqL1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBIYW1tZXI6IGFueTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3RhcENsaWNrXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhcENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICBtYzogYW55O1xyXG4gIGNsaWNrTGlzdGVuZXI6IGFueTtcclxuICBASW5wdXQoKSB0YXBDbGlja0Rpc2FibGVkOiBib29sZWFuO1xyXG4gIEBPdXRwdXQoKSB0YXBDbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuc2V0VGFwRXZlbnQoKTtcclxuICB9XHJcblxyXG4gIC8qKiBFbmFibGUgZ2VzdHVyZXMgaWYgaGFtbWVyIGlzIGxvYWRlZCAqL1xyXG4gIHNldFRhcEV2ZW50KCkge1xyXG5cclxuICAgIGlmICh0eXBlb2YgSGFtbWVyICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgICAgLy8gVXNlIGhhbW1lci5qcyB0YXAgZXZlbnRcclxuICAgICAgdGhpcy5tYyA9IG5ldyBIYW1tZXIodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgdGhpcy5tYy5vbigndGFwJywgKCkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy50YXBDbGlja0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnRhcENsaWNrLmVtaXQobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFVzZSBub3JtYWwgY2xpY2sgZXZlbnRcclxuICAgICAgdGhpcy5jbGlja0xpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRhcENsaWNrRGlzYWJsZWQpIHtcclxuICAgICAgICAgIHRoaXMudGFwQ2xpY2suZW1pdChudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5tYykge1xyXG4gICAgICB0aGlzLm1jLmRlc3Ryb3koKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xpY2tMaXN0ZW5lcigpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=