/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { GalleryRef } from './gallery-ref';
import { GALLERY_CONFIG } from '../utils/gallery.token';
import { defaultConfig } from '../utils/gallery.default';
var Gallery = /** @class */ (function () {
    function Gallery(config) {
        /**
         * Stores GalleryRef instances
         */
        this._instances = {};
        this.config = tslib_1.__assign({}, defaultConfig, config);
    }
    /**
     * Returns Gallery by ID
     */
    /**
     * Returns Gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    Gallery.prototype.ref = /**
     * Returns Gallery by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            return this._instances[id];
        }
        else {
            config = tslib_1.__assign({}, this.config, config);
            return this._instances[id] = new GalleryRef(config);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    Gallery.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            this._instances[id].destroy();
            this._instances[id] = null;
        }
    };
    /**
     * @return {?}
     */
    Gallery.prototype.destroyAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (key) {
            _this._instances[key].destory();
            _this._instances[key] = null;
        });
    };
    /**
     * @return {?}
     */
    Gallery.prototype.resetAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (id) {
            if (id === void 0) { id = 'root'; }
            return _this._instances[id].gallery;
        })
            .map(function (gallery) { return gallery.reset(); });
    };
    Gallery.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Gallery.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] },] },
    ]; };
    return Gallery;
}());
export { Gallery };
function Gallery_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Gallery.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Gallery.ctorParameters;
    /**
     * Stores GalleryRef instances
     * @type {?}
     */
    Gallery.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    Gallery.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1nYWxsZXJ5L2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9nYWxsZXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0lBWXZELGlCQUFvQzs7OzswQkFMTixFQUFFO1FBTTlCLElBQUksQ0FBQyxNQUFNLHdCQUFPLGFBQWEsRUFBSyxNQUFNLENBQUMsQ0FBQztLQUM3QztJQUVEOztPQUVHOzs7Ozs7O0lBQ0gscUJBQUc7Ozs7OztJQUFILFVBQUksRUFBVyxFQUFFLE1BQXNCO1FBQW5DLG1CQUFBLEVBQUEsV0FBVztRQUNiLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1QjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSx3QkFBTyxJQUFJLENBQUMsTUFBTSxFQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3JEO0tBQ0Y7Ozs7O0lBRUQseUJBQU87Ozs7SUFBUCxVQUFRLEVBQVc7UUFBWCxtQkFBQSxFQUFBLFdBQVc7UUFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDNUI7S0FDRjs7OztJQUVELDRCQUFVOzs7SUFBVjtRQUFBLGlCQU1DO1FBTEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3pCLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9CLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzdCLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsMEJBQVE7OztJQUFSO1FBQUEsaUJBSUM7UUFIQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDekIsR0FBRyxDQUFDLFVBQUMsRUFBVztZQUFYLG1CQUFBLEVBQUEsV0FBVztZQUFLLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPO1FBQTNCLENBQTJCLENBQUM7YUFDakQsR0FBRyxDQUFDLFVBQUMsT0FBbUIsSUFBSyxPQUFBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztLQUNsRDs7Z0JBNUNGLFVBQVU7Ozs7Z0RBU0ksTUFBTSxTQUFDLGNBQWM7O2tCQWhCcEM7O1NBUWEsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgR2FsbGVyeVJlZiB9IGZyb20gJy4vZ2FsbGVyeS1yZWYnO1xyXG5pbXBvcnQgeyBHQUxMRVJZX0NPTkZJRyB9IGZyb20gJy4uL3V0aWxzL2dhbGxlcnkudG9rZW4nO1xyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvZ2FsbGVyeS5kZWZhdWx0JztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5IHtcclxuXHJcbiAgLyoqIFN0b3JlcyBHYWxsZXJ5UmVmIGluc3RhbmNlcyAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2luc3RhbmNlcyA9IHt9O1xyXG5cclxuICAvKiogR2xvYmFsIGNvbmZpZyAqL1xyXG4gIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChHQUxMRVJZX0NPTkZJRykgY29uZmlnOiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWd9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBHYWxsZXJ5IGJ5IElEXHJcbiAgICovXHJcbiAgcmVmKGlkID0gJ3Jvb3QnLCBjb25maWc/OiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzW2lkXSBpbnN0YW5jZW9mIEdhbGxlcnlSZWYpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25maWcgPSB7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ307XHJcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXNbaWRdID0gbmV3IEdhbGxlcnlSZWYoY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3koaWQgPSAncm9vdCcpIHtcclxuICAgIGlmICh0aGlzLl9pbnN0YW5jZXNbaWRdIGluc3RhbmNlb2YgR2FsbGVyeVJlZikge1xyXG4gICAgICB0aGlzLl9pbnN0YW5jZXNbaWRdLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5faW5zdGFuY2VzW2lkXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95QWxsKCkge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VzKVxyXG4gICAgICAubWFwKChrZXkpID0+IHtcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZXNba2V5XS5kZXN0b3J5KCk7XHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzW2tleV0gPSBudWxsO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2V0QWxsKCkge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VzKVxyXG4gICAgICAubWFwKChpZCA9ICdyb290JykgPT4gdGhpcy5faW5zdGFuY2VzW2lkXS5nYWxsZXJ5KVxyXG4gICAgICAubWFwKChnYWxsZXJ5OiBHYWxsZXJ5UmVmKSA9PiBnYWxsZXJ5LnJlc2V0KCkpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19