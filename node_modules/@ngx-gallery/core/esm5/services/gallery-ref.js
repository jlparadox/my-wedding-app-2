/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { filter } from 'rxjs/operators/filter';
import { defaultConfig, defaultState } from '../utils/gallery.default';
import { GalleryAction } from '../models';
var GalleryRef = /** @class */ (function () {
    function GalleryRef(config, state) {
        if (config === void 0) { config = defaultConfig; }
        if (state === void 0) { state = defaultState; }
        this.config = config;
        this.state = state;
        this.state$ = new BehaviorSubject(state);
        this.config$ = new BehaviorSubject(defaultConfig);
        this.setConfig(config);
    }
    /**
     * Set gallery config
     * @param config
     */
    /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    GalleryRef.prototype.setConfig = /**
     * Set gallery config
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.config = tslib_1.__assign({}, defaultConfig, this.config, config);
        this.config$.next(this.config);
    };
    /**
     * Set gallery state
     * @param state
     */
    /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    GalleryRef.prototype.setState = /**
     * Set gallery state
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.state = tslib_1.__assign({}, this.state, state);
        this.state$.next(this.state);
    };
    /** Add gallery item
     * @param item - Gallery item object
     * @param active - Set the new item as current slide
     */
    /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    GalleryRef.prototype.add = /**
     * Add gallery item
     * @param {?} item - Gallery item object
     * @param {?=} active - Set the new item as current slide
     * @return {?}
     */
    function (item, active) {
        var /** @type {?} */ items = tslib_1.__spread(this.state.items, [item]);
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this.state.currIndex
        });
    };
    /** Remove gallery item
     * @param i - Item index
     */
    /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    GalleryRef.prototype.remove = /**
     * Remove gallery item
     * @param {?} i - Item index
     * @return {?}
     */
    function (i) {
        var /** @type {?} */ items = tslib_1.__spread(this.state.items.slice(0, i), this.state.items.slice(i + 1, this.state.items.length));
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    };
    /**
     * Load items and reset the state
     * @param items - Gallery images data
     */
    /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    GalleryRef.prototype.load = /**
     * Load items and reset the state
     * @param {?} items - Gallery images data
     * @return {?}
     */
    function (items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items: items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    };
    /**
     * Set active item
     * @param i - Active Index
     * @param action - Action type
     */
    /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    GalleryRef.prototype.set = /**
     * Set active item
     * @param {?} i - Active Index
     * @return {?}
     */
    function (i) {
        if (i !== this.state.currIndex) {
            this.setState({
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this.state.items.length - 1,
                hasPrev: i > 0
            });
        }
    };
    /**
     * Next item
     */
    /**
     * Next item
     * @return {?}
     */
    GalleryRef.prototype.next = /**
     * Next item
     * @return {?}
     */
    function () {
        if (this.state.hasNext) {
            this.set(this.state.currIndex + 1);
        }
        else if (this.config.loop) {
            this.set(0);
        }
    };
    /**
     * Prev item
     */
    /**
     * Prev item
     * @return {?}
     */
    GalleryRef.prototype.prev = /**
     * Prev item
     * @return {?}
     */
    function () {
        if (this.state.hasPrev) {
            this.set(this.state.currIndex - 1);
        }
        else if (this.config.loop) {
            this.set(this.state.items.length - 1);
        }
    };
    /**
     * Reset gallery to initial state
     */
    /**
     * Reset gallery to initial state
     * @return {?}
     */
    GalleryRef.prototype.reset = /**
     * Reset gallery to initial state
     * @return {?}
     */
    function () {
        this.setState(defaultState);
    };
    /**
     * Destroy GalleryRef (for internal use only)
     */
    /**
     * Destroy GalleryRef (for internal use only)
     * @return {?}
     */
    GalleryRef.prototype.destroy = /**
     * Destroy GalleryRef (for internal use only)
     * @return {?}
     */
    function () {
        this.state$.complete();
        this.config$.complete();
    };
    /** Gallery Events */
    /**
     * Stream that emits when gallery is initialized/reset
     */
    /**
     * Stream that emits when gallery is initialized/reset
     * @return {?}
     */
    GalleryRef.prototype.initialized = /**
     * Stream that emits when gallery is initialized/reset
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INITIALIZED; }));
    };
    /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     */
    /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     * @return {?}
     */
    GalleryRef.prototype.itemsChanged = /**
     * Stream that emits when items is changed (items loaded, item added, item removed)
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.ITEMS_CHANGED; }));
    };
    /**
     * Stream that emits when current item is changed
     */
    /**
     * Stream that emits when current item is changed
     * @return {?}
     */
    GalleryRef.prototype.indexChanged = /**
     * Stream that emits when current item is changed
     * @return {?}
     */
    function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INDEX_CHANGED; }));
    };
    return GalleryRef;
}());
export { GalleryRef };
function GalleryRef_tsickle_Closure_declarations() {
    /** @type {?} */
    GalleryRef.prototype.state$;
    /** @type {?} */
    GalleryRef.prototype.config$;
    /** @type {?} */
    GalleryRef.prototype.config;
    /** @type {?} */
    GalleryRef.prototype.state;
}

//# sourceMappingURL=data:application/json;base64,