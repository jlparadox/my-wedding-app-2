/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectionStrategy, HostBinding, HostListener } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
export class LightboxComponent {
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseLeave(e) {
        if (e.toState === 'void') {
            this.overlayRef.dispose();
        }
    }
}
LightboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'lightbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                animations: [
                    trigger('slideDialog', [
                        state('in', style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),
                        transition(':enter', [
                            style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 }),
                            animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ]),
                        transition(':leave', [
                            animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({ transform: 'translateY(25%)', opacity: 0 }))
                        ]),
                    ])
                ],
                template: `
    <gallery [id]="id" [destroyRef]="false">
      <button class="g-btn-close" (click)="overlayRef.detach()"></button>
    </gallery>
  `
            },] },
];
/** @nocollapse */
LightboxComponent.ctorParameters = () => [];
LightboxComponent.propDecorators = {
    "slideAnimation": [{ type: HostBinding, args: ['@slideDialog',] },],
    "onMouseLeave": [{ type: HostListener, args: ['@slideDialog.done', ['$event'],] },],
};
function LightboxComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    LightboxComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    LightboxComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    LightboxComponent.propDecorators;
    /** @type {?} */
    LightboxComponent.prototype.id;
    /** @type {?} */
    LightboxComponent.prototype.overlayRef;
    /** @type {?} */
    LightboxComponent.prototype.slideAnimation;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1nYWxsZXJ5L2xpZ2h0Ym94LyIsInNvdXJjZXMiOlsibGlnaHRib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQTJCakYsTUFBTTs7Ozs7SUFPMkMsWUFBWSxDQUFDLENBQUM7UUFDM0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDM0I7Ozs7WUFsQ0osU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxVQUFVO2dCQUNwQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsVUFBVSxFQUFFO29CQUNWLE9BQU8sQ0FBQyxhQUFhLEVBQUU7d0JBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLHlCQUF5QixFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO3dCQUN0RSxVQUFVLENBQUMsUUFBUSxFQUFFOzRCQUNuQixLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsNEJBQTRCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDOzRCQUM1RCxPQUFPLENBQUMsd0NBQXdDLENBQUM7eUJBQ2xELENBQUM7d0JBQ0YsVUFBVSxDQUFDLFFBQVEsRUFBRTs0QkFDbkIsT0FBTyxDQUFDLHdDQUF3QyxFQUM5QyxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQ2xEO3lCQUNGLENBQUM7cUJBQ0gsQ0FBQztpQkFDSDtnQkFDRCxRQUFRLEVBQUU7Ozs7R0FJVDthQUNGOzs7OzsrQkFNRSxXQUFXLFNBQUMsY0FBYzs2QkFFMUIsWUFBWSxTQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGlnaHRib3gnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGFuaW1hdGlvbnM6IFtcclxuICAgIHRyaWdnZXIoJ3NsaWRlRGlhbG9nJywgW1xyXG4gICAgICBzdGF0ZSgnaW4nLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwJSkgc2NhbGUoMSknLCBvcGFjaXR5OiAxfSkpLFxyXG4gICAgICB0cmFuc2l0aW9uKCc6ZW50ZXInLCBbXHJcbiAgICAgICAgc3R5bGUoe3RyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMjUlKSBzY2FsZSgwLjkpJywgb3BhY2l0eTogMH0pLFxyXG4gICAgICAgIGFuaW1hdGUoJzQwMG1zIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuMjUsIDEpJylcclxuICAgICAgXSksXHJcbiAgICAgIHRyYW5zaXRpb24oJzpsZWF2ZScsIFtcclxuICAgICAgICBhbmltYXRlKCc0MDBtcyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKScsXHJcbiAgICAgICAgICBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWSgyNSUpJywgb3BhY2l0eTogMH0pXHJcbiAgICAgICAgKVxyXG4gICAgICBdKSxcclxuICAgIF0pXHJcbiAgXSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGdhbGxlcnkgW2lkXT1cImlkXCIgW2Rlc3Ryb3lSZWZdPVwiZmFsc2VcIj5cclxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImctYnRuLWNsb3NlXCIgKGNsaWNrKT1cIm92ZXJsYXlSZWYuZGV0YWNoKClcIj48L2J1dHRvbj5cclxuICAgIDwvZ2FsbGVyeT5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMaWdodGJveENvbXBvbmVudCB7XHJcblxyXG4gIGlkOiBzdHJpbmc7XHJcbiAgb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdAc2xpZGVEaWFsb2cnKSBzbGlkZUFuaW1hdGlvbjtcclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignQHNsaWRlRGlhbG9nLmRvbmUnLCBbJyRldmVudCddKSBvbk1vdXNlTGVhdmUoZSkge1xyXG4gICAgaWYgKGUudG9TdGF0ZSA9PT0gJ3ZvaWQnKSB7XHJcbiAgICAgIHRoaXMub3ZlcmxheVJlZi5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==