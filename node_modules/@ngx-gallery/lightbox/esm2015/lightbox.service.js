/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Gallery } from '@ngx-gallery/core';
import { LIGHTBOX_CONFIG } from './lightbox.token';
import { defaultConfig } from './lightbox.default';
import { LightboxComponent } from './lightbox.component';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';
import { Subject } from 'rxjs/Subject';
export class Lightbox {
    /**
     * @param {?} config
     * @param {?} _gallery
     * @param {?} _overlay
     */
    constructor(config, _gallery, _overlay) {
        this._gallery = _gallery;
        this._overlay = _overlay;
        // Stream that emits when lightbox is opened
        this.opened = new Subject();
        // Stream that emits when lightbox is closed
        this.closed = new Subject();
        this._config = Object.assign({}, defaultConfig, config);
    }
    /**
     * Set Lightbox Config
     * @param {?} config - LightboxConfig
     * @return {?}
     */
    setConfig(config) {
        this._config = Object.assign({}, this._config, config);
    }
    /**
     * Open Lightbox Overlay
     * @param {?=} i - Current Index
     * @param {?=} id - Gallery ID
     * @param {?=} config - Lightbox Config
     * @return {?}
     */
    open(i = 0, id = 'lightbox', config) {
        const /** @type {?} */ _config = config ? Object.assign({}, this._config, config) : this._config;
        const /** @type {?} */ overlayConfig = {
            backdropClass: _config.backdropClass,
            panelClass: _config.panelClass,
            hasBackdrop: _config.hasBackdrop,
            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
            scrollStrategy: this._overlay.scrollStrategies.block()
        };
        const /** @type {?} */ galleryRef = this._gallery.ref(id);
        galleryRef.set(i);
        this._overlayRef = this._overlay.create(overlayConfig);
        // overlay opened event
        this._overlayRef.attachments().subscribe(() => this.opened.next(id));
        // overlay closed event
        this._overlayRef.detachments().subscribe(() => this.closed.next(id));
        // Attach gallery to the overlay
        const /** @type {?} */ galleryPortal = new ComponentPortal(LightboxComponent);
        const /** @type {?} */ lightboxRef = this._overlayRef.attach(galleryPortal);
        lightboxRef.instance.id = id;
        lightboxRef.instance.overlayRef = this._overlayRef;
        if (_config.hasBackdrop) {
            this._overlayRef.backdropClick().subscribe(() => this.close());
        }
        if (_config.keyboardShortcuts) {
            this._overlayRef.keydownEvents().subscribe((event) => {
                switch (event.keyCode) {
                    case LEFT_ARROW:
                        galleryRef.prev(id);
                        break;
                    case RIGHT_ARROW:
                        galleryRef.next(id);
                        break;
                    case ESCAPE:
                        this.close();
                }
            });
        }
    }
    /**
     * Close Lightbox Overlay
     * @return {?}
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
}
Lightbox.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Lightbox.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LIGHTBOX_CONFIG,] },] },
    { type: Gallery, },
    { type: Overlay, },
];
function Lightbox_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Lightbox.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Lightbox.ctorParameters;
    /** @type {?} */
    Lightbox.prototype._overlayRef;
    /** @type {?} */
    Lightbox.prototype._config;
    /** @type {?} */
    Lightbox.prototype.opened;
    /** @type {?} */
    Lightbox.prototype.closed;
    /** @type {?} */
    Lightbox.prototype._gallery;
    /** @type {?} */
    Lightbox.prototype._overlay;
}

//# sourceMappingURL=data:application/json;base64,