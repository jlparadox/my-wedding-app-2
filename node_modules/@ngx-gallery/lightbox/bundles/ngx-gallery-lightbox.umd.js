(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@ngx-gallery/core'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/cdk/keycodes'), require('rxjs/Subject'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-gallery/lightbox', ['exports', '@angular/core', '@angular/animations', '@ngx-gallery/core', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/cdk/keycodes', 'rxjs/Subject', '@angular/common'], factory) :
    (factory((global['ngx-gallery'] = global['ngx-gallery'] || {}, global['ngx-gallery'].lightbox = {}),global.ng.core,global.ng.animations,null,global.ng.cdk.overlay,global.ng.cdk.portal,global.ng.cdk.keycodes,global.rxjs.Subject,global.ng.common));
}(this, (function (exports,core,animations,core$1,overlay,portal,keycodes,Subject,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LightboxComponent = (function () {
        function LightboxComponent() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        LightboxComponent.prototype.onMouseLeave = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.toState === 'void') {
                    this.overlayRef.dispose();
                }
            };
        LightboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lightbox',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        animations: [
                            animations.trigger('slideDialog', [
                                animations.state('in', animations.style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),
                                animations.transition(':enter', [
                                    animations.style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 }),
                                    animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
                                ]),
                                animations.transition(':leave', [
                                    animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)', animations.style({ transform: 'translateY(25%)', opacity: 0 }))
                                ]),
                            ])
                        ],
                        template: "\n    <gallery [id]=\"id\" [destroyRef]=\"false\">\n      <button class=\"g-btn-close\" (click)=\"overlayRef.detach()\"></button>\n    </gallery>\n  "
                    },] },
        ];
        /** @nocollapse */
        LightboxComponent.ctorParameters = function () { return []; };
        LightboxComponent.propDecorators = {
            "slideAnimation": [{ type: core.HostBinding, args: ['@slideDialog',] },],
            "onMouseLeave": [{ type: core.HostListener, args: ['@slideDialog.done', ['$event'],] },],
        };
        return LightboxComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LIGHTBOX_CONFIG = new core.InjectionToken('lightboxConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ defaultConfig = {
        backdropClass: 'g-backdrop',
        panelClass: 'g-overlay',
        hasBackdrop: true,
        keyboardShortcuts: true
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Lightbox = (function () {
        function Lightbox(config, _gallery, _overlay) {
            this._gallery = _gallery;
            this._overlay = _overlay;
            // Stream that emits when lightbox is opened
            this.opened = new Subject.Subject();
            // Stream that emits when lightbox is closed
            this.closed = new Subject.Subject();
            this._config = __assign({}, defaultConfig, config);
        }
        /**
         * Set Lightbox Config
         * @param config - LightboxConfig
         */
        /**
         * Set Lightbox Config
         * @param {?} config - LightboxConfig
         * @return {?}
         */
        Lightbox.prototype.setConfig = /**
         * Set Lightbox Config
         * @param {?} config - LightboxConfig
         * @return {?}
         */
            function (config) {
                this._config = __assign({}, this._config, config);
            };
        /**
         * Open Lightbox Overlay
         * @param i - Current Index
         * @param id - Gallery ID
         * @param config - Lightbox Config
         */
        /**
         * Open Lightbox Overlay
         * @param {?=} i - Current Index
         * @param {?=} id - Gallery ID
         * @param {?=} config - Lightbox Config
         * @return {?}
         */
        Lightbox.prototype.open = /**
         * Open Lightbox Overlay
         * @param {?=} i - Current Index
         * @param {?=} id - Gallery ID
         * @param {?=} config - Lightbox Config
         * @return {?}
         */
            function (i, id, config) {
                var _this = this;
                if (i === void 0) {
                    i = 0;
                }
                if (id === void 0) {
                    id = 'lightbox';
                }
                var /** @type {?} */ _config = config ? __assign({}, this._config, config) : this._config;
                var /** @type {?} */ overlayConfig = {
                    backdropClass: _config.backdropClass,
                    panelClass: _config.panelClass,
                    hasBackdrop: _config.hasBackdrop,
                    positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                    scrollStrategy: this._overlay.scrollStrategies.block()
                };
                var /** @type {?} */ galleryRef = this._gallery.ref(id);
                galleryRef.set(i);
                this._overlayRef = this._overlay.create(overlayConfig);
                // overlay opened event
                this._overlayRef.attachments().subscribe(function () { return _this.opened.next(id); });
                // overlay closed event
                this._overlayRef.detachments().subscribe(function () { return _this.closed.next(id); });
                // Attach gallery to the overlay
                var /** @type {?} */ galleryPortal = new portal.ComponentPortal(LightboxComponent);
                var /** @type {?} */ lightboxRef = this._overlayRef.attach(galleryPortal);
                lightboxRef.instance.id = id;
                lightboxRef.instance.overlayRef = this._overlayRef;
                if (_config.hasBackdrop) {
                    this._overlayRef.backdropClick().subscribe(function () { return _this.close(); });
                }
                if (_config.keyboardShortcuts) {
                    this._overlayRef.keydownEvents().subscribe(function (event) {
                        switch (event.keyCode) {
                            case keycodes.LEFT_ARROW:
                                galleryRef.prev(id);
                                break;
                            case keycodes.RIGHT_ARROW:
                                galleryRef.next(id);
                                break;
                            case keycodes.ESCAPE:
                                _this.close();
                        }
                    });
                }
            };
        /**
         * Close Lightbox Overlay
         */
        /**
         * Close Lightbox Overlay
         * @return {?}
         */
        Lightbox.prototype.close = /**
         * Close Lightbox Overlay
         * @return {?}
         */
            function () {
                if (this._overlayRef.hasAttached()) {
                    this._overlayRef.detach();
                }
            };
        Lightbox.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        Lightbox.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [LIGHTBOX_CONFIG,] },] },
                { type: core$1.Gallery, },
                { type: overlay.Overlay, },
            ];
        };
        return Lightbox;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} gallery
     * @param {?} overlay
     * @return {?}
     */
    function lightboxFactory(config, gallery, overlay$$1) {
        return new Lightbox(config, gallery, overlay$$1);
    }
    var LightboxModule = (function () {
        function LightboxModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        LightboxModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: LightboxModule,
                    providers: [
                        {
                            provide: LIGHTBOX_CONFIG,
                            useValue: config
                        },
                        {
                            provide: Lightbox,
                            useFactory: lightboxFactory,
                            deps: [LIGHTBOX_CONFIG, core$1.Gallery, overlay.Overlay]
                        }
                    ]
                };
            };
        LightboxModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            overlay.OverlayModule,
                            core$1.GalleryModule
                        ],
                        declarations: [
                            LightboxComponent
                        ],
                        entryComponents: [
                            LightboxComponent
                        ]
                    },] },
        ];
        /** @nocollapse */
        LightboxModule.ctorParameters = function () { return []; };
        return LightboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.LightboxComponent = LightboxComponent;
    exports.Lightbox = Lightbox;
    exports.lightboxFactory = lightboxFactory;
    exports.LightboxModule = LightboxModule;
    exports.ɵa = LIGHTBOX_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,