import { Component, ChangeDetectionStrategy, HostBinding, HostListener, InjectionToken, Inject, Injectable, NgModule } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { __assign } from 'tslib';
import { Gallery, GalleryModule } from '@ngx-gallery/core';
import { Overlay, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';
import { Subject } from 'rxjs/Subject';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LightboxComponent = /** @class */ (function () {
    function LightboxComponent() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    LightboxComponent.prototype.onMouseLeave = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.toState === 'void') {
            this.overlayRef.dispose();
        }
    };
    LightboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lightbox',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    animations: [
                        trigger('slideDialog', [
                            state('in', style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),
                            transition(':enter', [
                                style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 }),
                                animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
                            ]),
                            transition(':leave', [
                                animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({ transform: 'translateY(25%)', opacity: 0 }))
                            ]),
                        ])
                    ],
                    template: "\n    <gallery [id]=\"id\" [destroyRef]=\"false\">\n      <button class=\"g-btn-close\" (click)=\"overlayRef.detach()\"></button>\n    </gallery>\n  "
                },] },
    ];
    /** @nocollapse */
    LightboxComponent.ctorParameters = function () { return []; };
    LightboxComponent.propDecorators = {
        "slideAnimation": [{ type: HostBinding, args: ['@slideDialog',] },],
        "onMouseLeave": [{ type: HostListener, args: ['@slideDialog.done', ['$event'],] },],
    };
    return LightboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ LIGHTBOX_CONFIG = new InjectionToken('lightboxConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ defaultConfig = {
    backdropClass: 'g-backdrop',
    panelClass: 'g-overlay',
    hasBackdrop: true,
    keyboardShortcuts: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Lightbox = /** @class */ (function () {
    function Lightbox(config, _gallery, _overlay) {
        this._gallery = _gallery;
        this._overlay = _overlay;
        // Stream that emits when lightbox is opened
        this.opened = new Subject();
        // Stream that emits when lightbox is closed
        this.closed = new Subject();
        this._config = __assign({}, defaultConfig, config);
    }
    /**
     * Set Lightbox Config
     * @param config - LightboxConfig
     */
    /**
     * Set Lightbox Config
     * @param {?} config - LightboxConfig
     * @return {?}
     */
    Lightbox.prototype.setConfig = /**
     * Set Lightbox Config
     * @param {?} config - LightboxConfig
     * @return {?}
     */
    function (config) {
        this._config = __assign({}, this._config, config);
    };
    /**
     * Open Lightbox Overlay
     * @param i - Current Index
     * @param id - Gallery ID
     * @param config - Lightbox Config
     */
    /**
     * Open Lightbox Overlay
     * @param {?=} i - Current Index
     * @param {?=} id - Gallery ID
     * @param {?=} config - Lightbox Config
     * @return {?}
     */
    Lightbox.prototype.open = /**
     * Open Lightbox Overlay
     * @param {?=} i - Current Index
     * @param {?=} id - Gallery ID
     * @param {?=} config - Lightbox Config
     * @return {?}
     */
    function (i, id, config) {
        var _this = this;
        if (i === void 0) { i = 0; }
        if (id === void 0) { id = 'lightbox'; }
        var /** @type {?} */ _config = config ? __assign({}, this._config, config) : this._config;
        var /** @type {?} */ overlayConfig = {
            backdropClass: _config.backdropClass,
            panelClass: _config.panelClass,
            hasBackdrop: _config.hasBackdrop,
            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
            scrollStrategy: this._overlay.scrollStrategies.block()
        };
        var /** @type {?} */ galleryRef = this._gallery.ref(id);
        galleryRef.set(i);
        this._overlayRef = this._overlay.create(overlayConfig);
        // overlay opened event
        this._overlayRef.attachments().subscribe(function () { return _this.opened.next(id); });
        // overlay closed event
        this._overlayRef.detachments().subscribe(function () { return _this.closed.next(id); });
        // Attach gallery to the overlay
        var /** @type {?} */ galleryPortal = new ComponentPortal(LightboxComponent);
        var /** @type {?} */ lightboxRef = this._overlayRef.attach(galleryPortal);
        lightboxRef.instance.id = id;
        lightboxRef.instance.overlayRef = this._overlayRef;
        if (_config.hasBackdrop) {
            this._overlayRef.backdropClick().subscribe(function () { return _this.close(); });
        }
        if (_config.keyboardShortcuts) {
            this._overlayRef.keydownEvents().subscribe(function (event) {
                switch (event.keyCode) {
                    case LEFT_ARROW:
                        galleryRef.prev(id);
                        break;
                    case RIGHT_ARROW:
                        galleryRef.next(id);
                        break;
                    case ESCAPE:
                        _this.close();
                }
            });
        }
    };
    /**
     * Close Lightbox Overlay
     */
    /**
     * Close Lightbox Overlay
     * @return {?}
     */
    Lightbox.prototype.close = /**
     * Close Lightbox Overlay
     * @return {?}
     */
    function () {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    };
    Lightbox.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Lightbox.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LIGHTBOX_CONFIG,] },] },
        { type: Gallery, },
        { type: Overlay, },
    ]; };
    return Lightbox;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} config
 * @param {?} gallery
 * @param {?} overlay
 * @return {?}
 */
function lightboxFactory(config, gallery, overlay) {
    return new Lightbox(config, gallery, overlay);
}
var LightboxModule = /** @class */ (function () {
    function LightboxModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    LightboxModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: LightboxModule,
            providers: [
                {
                    provide: LIGHTBOX_CONFIG,
                    useValue: config
                },
                {
                    provide: Lightbox,
                    useFactory: lightboxFactory,
                    deps: [LIGHTBOX_CONFIG, Gallery, Overlay]
                }
            ]
        };
    };
    LightboxModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        OverlayModule,
                        GalleryModule
                    ],
                    declarations: [
                        LightboxComponent
                    ],
                    entryComponents: [
                        LightboxComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    LightboxModule.ctorParameters = function () { return []; };
    return LightboxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { LightboxComponent, Lightbox, lightboxFactory, LightboxModule, LIGHTBOX_CONFIG as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,