import { Directive, ElementRef, Renderer2, Input, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { Gallery, ImageItem, GalleryModule } from '@ngx-gallery/core';
import { Lightbox, LightboxModule } from '@ngx-gallery/lightbox';
import { Subject } from 'rxjs/Subject';
import { from } from 'rxjs/observable/from';
import { empty } from 'rxjs/observable/empty';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { switchMap } from 'rxjs/operators/switchMap';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GallerizeDirective {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} _lightbox
     * @param {?} _gallery
     * @param {?} platform
     */
    constructor(_el, _renderer, _lightbox, _gallery, platform) {
        this._el = _el;
        this._renderer = _renderer;
        this._lightbox = _lightbox;
        this._gallery = _gallery;
        this.platform = platform;
        this.gallerizer$ = new Subject();
        /**
         * Add images with specific classes to the gallery
         */
        this.gallerize = 'root';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /**
         * Get galleryRef
         */
        const /** @type {?} */ galleryRef = this._gallery.ref(this.gallerize);
        /**
         * Serialize img classes
         */
        const /** @type {?} */ classes = (this.forClass) ? this.forClass.split(' ').map((className) => '.' + className) : '';
        this.gallerizer$.pipe(debounceTime(300), switchMap(() => {
            /**
             * get all img elements from content
             */
            const /** @type {?} */ imageElements = this._el.nativeElement.querySelectorAll('img' + classes);
            if (imageElements && imageElements.length) {
                const /** @type {?} */ images = [];
                return from(imageElements).pipe(map((img, i) => {
                    // Add click event to the image
                    this._renderer.setStyle(img, 'cursor', 'pointer');
                    this._renderer.setProperty(img, 'onclick', () => this._lightbox.open(i, this.gallerize));
                    return img;
                }), tap((img) => images.push(new ImageItem(img.src, img.src))), finalize(() => galleryRef.load(images)));
            }
            else {
                return empty();
            }
        })).subscribe();
        // Observe content changes
        if (isPlatformBrowser(this.platform)) {
            this.observer = new MutationObserver(() => this.gallerizer$.next());
            this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.gallerizer$.complete();
        if (this.observer) {
            this.observer.disconnect();
        }
    }
}
GallerizeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gallerize]'
            },] },
];
/** @nocollapse */
GallerizeDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: Lightbox, },
    { type: Gallery, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
GallerizeDirective.propDecorators = {
    "gallerize": [{ type: Input },],
    "forClass": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GallerizeModule {
}
GallerizeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    GalleryModule,
                    LightboxModule
                ],
                declarations: [GallerizeDirective],
                exports: [GallerizeDirective]
            },] },
];
/** @nocollapse */
GallerizeModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { GallerizeDirective, GallerizeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktZ2FsbGVyaXplLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWdhbGxlcnkvZ2FsbGVyaXplL2dhbGxlcml6ZS5kaXJlY3RpdmUudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9nYWxsZXJpemUvZ2FsbGVyaXplLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95LCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEdhbGxlcnksIEdhbGxlcnlJdGVtLCBJbWFnZUl0ZW0gfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XG5pbXBvcnQgeyBMaWdodGJveCB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9saWdodGJveCc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL21hcCc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy90YXAnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvc3dpdGNoTWFwJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL2RlYm91bmNlVGltZSc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2dhbGxlcml6ZV0nXG59KVxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBvYnNlcnZlcjogYW55O1xuICBnYWxsZXJpemVyJCA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKiBBZGQgaW1hZ2VzIHdpdGggc3BlY2lmaWMgY2xhc3NlcyB0byB0aGUgZ2FsbGVyeSAqL1xuICBASW5wdXQoKSBnYWxsZXJpemUgPSAncm9vdCc7XG4gIEBJbnB1dCgpIGZvckNsYXNzOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2xpZ2h0Ym94OiBMaWdodGJveCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfZ2FsbGVyeTogR2FsbGVyeSxcbiAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIC8qKiBHZXQgZ2FsbGVyeVJlZiAqL1xuICAgIGNvbnN0IGdhbGxlcnlSZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLmdhbGxlcml6ZSk7XG5cbiAgICAvKiogU2VyaWFsaXplIGltZyBjbGFzc2VzICovXG4gICAgY29uc3QgY2xhc3NlcyA9ICh0aGlzLmZvckNsYXNzKSA/IHRoaXMuZm9yQ2xhc3Muc3BsaXQoJyAnKS5tYXAoKGNsYXNzTmFtZSkgPT4gJy4nICsgY2xhc3NOYW1lKSA6ICcnO1xuXG4gICAgdGhpcy5nYWxsZXJpemVyJC5waXBlKFxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuXG4gICAgICAgIC8qKiBnZXQgYWxsIGltZyBlbGVtZW50cyBmcm9tIGNvbnRlbnQgKi9cbiAgICAgICAgY29uc3QgaW1hZ2VFbGVtZW50cyA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJyArIGNsYXNzZXMpO1xuXG4gICAgICAgIGlmIChpbWFnZUVsZW1lbnRzICYmIGltYWdlRWxlbWVudHMubGVuZ3RoKSB7XG5cbiAgICAgICAgICBjb25zdCBpbWFnZXM6IEdhbGxlcnlJdGVtW10gPSBbXTtcblxuICAgICAgICAgIHJldHVybiBmcm9tKGltYWdlRWxlbWVudHMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGltZzogSFRNTEltYWdlRWxlbWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgICAvLyBBZGQgY2xpY2sgZXZlbnQgdG8gdGhlIGltYWdlXG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGltZywgJ2N1cnNvcicsICdwb2ludGVyJyk7XG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KGltZywgJ29uY2xpY2snLCAoKSA9PiB0aGlzLl9saWdodGJveC5vcGVuKGksIHRoaXMuZ2FsbGVyaXplKSk7XG4gICAgICAgICAgICAgIHJldHVybiBpbWc7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhcCgoaW1nOiBIVE1MSW1hZ2VFbGVtZW50KSA9PiBpbWFnZXMucHVzaChuZXcgSW1hZ2VJdGVtKGltZy5zcmMsIGltZy5zcmMpKSksXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiBnYWxsZXJ5UmVmLmxvYWQoaW1hZ2VzKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICkuc3Vic2NyaWJlKCk7XG5cbiAgICAvLyBPYnNlcnZlIGNvbnRlbnQgY2hhbmdlc1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkge1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuZ2FsbGVyaXplciQubmV4dCgpKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmdhbGxlcml6ZXIkLmNvbXBsZXRlKCk7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgR2FsbGVyeU1vZHVsZSB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9jb3JlJztcclxuaW1wb3J0IHsgTGlnaHRib3hNb2R1bGUgfSBmcm9tICdAbmd4LWdhbGxlcnkvbGlnaHRib3gnO1xyXG5pbXBvcnQgeyBHYWxsZXJpemVEaXJlY3RpdmUgfSBmcm9tICcuL2dhbGxlcml6ZS5kaXJlY3RpdmUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBHYWxsZXJ5TW9kdWxlLFxyXG4gICAgTGlnaHRib3hNb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW0dhbGxlcml6ZURpcmVjdGl2ZV0sXHJcbiAgZXhwb3J0czogW0dhbGxlcml6ZURpcmVjdGl2ZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZU1vZHVsZSB7XHJcblxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztJQTBCRSxZQUFvQixHQUFlLEVBQ2YsV0FDQSxXQUNBLFVBQ3FCO1FBSnJCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixjQUFTLEdBQVQsU0FBUztRQUNULGNB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