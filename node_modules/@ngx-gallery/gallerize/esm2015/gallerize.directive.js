/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Gallery, ImageItem } from '@ngx-gallery/core';
import { Lightbox } from '@ngx-gallery/lightbox';
import { Subject } from 'rxjs/Subject';
import { from } from 'rxjs/observable/from';
import { empty } from 'rxjs/observable/empty';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { switchMap } from 'rxjs/operators/switchMap';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { finalize } from 'rxjs/operators';
export class GallerizeDirective {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} _lightbox
     * @param {?} _gallery
     * @param {?} platform
     */
    constructor(_el, _renderer, _lightbox, _gallery, platform) {
        this._el = _el;
        this._renderer = _renderer;
        this._lightbox = _lightbox;
        this._gallery = _gallery;
        this.platform = platform;
        this.gallerizer$ = new Subject();
        /**
         * Add images with specific classes to the gallery
         */
        this.gallerize = 'root';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /**
         * Get galleryRef
         */
        const /** @type {?} */ galleryRef = this._gallery.ref(this.gallerize);
        /**
         * Serialize img classes
         */
        const /** @type {?} */ classes = (this.forClass) ? this.forClass.split(' ').map((className) => '.' + className) : '';
        this.gallerizer$.pipe(debounceTime(300), switchMap(() => {
            /**
             * get all img elements from content
             */
            const /** @type {?} */ imageElements = this._el.nativeElement.querySelectorAll('img' + classes);
            if (imageElements && imageElements.length) {
                const /** @type {?} */ images = [];
                return from(imageElements).pipe(map((img, i) => {
                    // Add click event to the image
                    this._renderer.setStyle(img, 'cursor', 'pointer');
                    this._renderer.setProperty(img, 'onclick', () => this._lightbox.open(i, this.gallerize));
                    return img;
                }), tap((img) => images.push(new ImageItem(img.src, img.src))), finalize(() => galleryRef.load(images)));
            }
            else {
                return empty();
            }
        })).subscribe();
        // Observe content changes
        if (isPlatformBrowser(this.platform)) {
            this.observer = new MutationObserver(() => this.gallerizer$.next());
            this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.gallerizer$.complete();
        if (this.observer) {
            this.observer.disconnect();
        }
    }
}
GallerizeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gallerize]'
            },] },
];
/** @nocollapse */
GallerizeDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: Lightbox, },
    { type: Gallery, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
GallerizeDirective.propDecorators = {
    "gallerize": [{ type: Input },],
    "forClass": [{ type: Input },],
};
function GallerizeDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GallerizeDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GallerizeDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GallerizeDirective.propDecorators;
    /** @type {?} */
    GallerizeDirective.prototype.observer;
    /** @type {?} */
    GallerizeDirective.prototype.gallerizer$;
    /**
     * Add images with specific classes to the gallery
     * @type {?}
     */
    GallerizeDirective.prototype.gallerize;
    /** @type {?} */
    GallerizeDirective.prototype.forClass;
    /** @type {?} */
    GallerizeDirective.prototype._el;
    /** @type {?} */
    GallerizeDirective.prototype._renderer;
    /** @type {?} */
    GallerizeDirective.prototype._lightbox;
    /** @type {?} */
    GallerizeDirective.prototype._gallery;
    /** @type {?} */
    GallerizeDirective.prototype.platform;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9nYWxsZXJpemUvIiwic291cmNlcyI6WyJnYWxsZXJpemUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELE9BQU8sRUFBRSxPQUFPLEVBQWUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWpELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzFDLE1BQU07Ozs7Ozs7O0lBUUosWUFBb0IsR0FBZSxFQUNmLFdBQ0EsV0FDQSxVQUNxQjtRQUpyQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsY0FBUyxHQUFULFNBQVM7UUFDVCxjQUFTLEdBQVQsU0FBUztRQUNULGFBQVEsR0FBUixRQUFRO1FBQ2EsYUFBUSxHQUFSLFFBQVE7MkJBVG5DLElBQUksT0FBTyxFQUFFOzs7O3lCQUVOLE1BQU07S0FRMUI7Ozs7SUFFRCxRQUFROzs7O1FBR04sdUJBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7OztRQUdyRCx1QkFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFcEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQ25CLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsU0FBUyxDQUFDLEdBQUcsRUFBRTs7OztZQUdiLHVCQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUM7WUFFL0UsRUFBRSxDQUFDLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUUxQyx1QkFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztnQkFFakMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQzdCLEdBQUcsQ0FBQyxDQUFDLEdBQXFCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O29CQUUvQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO29CQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDekYsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWixDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsR0FBcUIsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQzVFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3hDLENBQUM7YUFDSDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtTQUNGLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDOztRQUdkLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDbkY7S0FDRjs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDNUI7S0FDRjs7O1lBakVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTthQUN4Qjs7OztZQWpCbUIsVUFBVTtZQUFFLFNBQVM7WUFJaEMsUUFBUTtZQURSLE9BQU87eUNBMkJELE1BQU0sU0FBQyxXQUFXOzs7MEJBUDlCLEtBQUs7eUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgR2FsbGVyeSwgR2FsbGVyeUl0ZW0sIEltYWdlSXRlbSB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9jb3JlJztcbmltcG9ydCB7IExpZ2h0Ym94IH0gZnJvbSAnQG5neC1nYWxsZXJ5L2xpZ2h0Ym94JztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICdyeGpzL29ic2VydmFibGUvZW1wdHknO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL3RhcCc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy9zd2l0Y2hNYXAnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvZGVib3VuY2VUaW1lJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZ2FsbGVyaXplXSdcbn0pXG5leHBvcnQgY2xhc3MgR2FsbGVyaXplRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIG9ic2VydmVyOiBhbnk7XG4gIGdhbGxlcml6ZXIkID0gbmV3IFN1YmplY3QoKTtcbiAgLyoqIEFkZCBpbWFnZXMgd2l0aCBzcGVjaWZpYyBjbGFzc2VzIHRvIHRoZSBnYWxsZXJ5ICovXG4gIEBJbnB1dCgpIGdhbGxlcml6ZSA9ICdyb290JztcbiAgQElucHV0KCkgZm9yQ2xhc3M6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfbGlnaHRib3g6IExpZ2h0Ym94LFxuICAgICAgICAgICAgICBwcml2YXRlIF9nYWxsZXJ5OiBHYWxsZXJ5LFxuICAgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtOiBPYmplY3QpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuXG4gICAgLyoqIEdldCBnYWxsZXJ5UmVmICovXG4gICAgY29uc3QgZ2FsbGVyeVJlZiA9IHRoaXMuX2dhbGxlcnkucmVmKHRoaXMuZ2FsbGVyaXplKTtcblxuICAgIC8qKiBTZXJpYWxpemUgaW1nIGNsYXNzZXMgKi9cbiAgICBjb25zdCBjbGFzc2VzID0gKHRoaXMuZm9yQ2xhc3MpID8gdGhpcy5mb3JDbGFzcy5zcGxpdCgnICcpLm1hcCgoY2xhc3NOYW1lKSA9PiAnLicgKyBjbGFzc05hbWUpIDogJyc7XG5cbiAgICB0aGlzLmdhbGxlcml6ZXIkLnBpcGUoXG4gICAgICBkZWJvdW5jZVRpbWUoMzAwKSxcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XG5cbiAgICAgICAgLyoqIGdldCBhbGwgaW1nIGVsZW1lbnRzIGZyb20gY29udGVudCAqL1xuICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnRzID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnICsgY2xhc3Nlcyk7XG5cbiAgICAgICAgaWYgKGltYWdlRWxlbWVudHMgJiYgaW1hZ2VFbGVtZW50cy5sZW5ndGgpIHtcblxuICAgICAgICAgIGNvbnN0IGltYWdlczogR2FsbGVyeUl0ZW1bXSA9IFtdO1xuXG4gICAgICAgICAgcmV0dXJuIGZyb20oaW1hZ2VFbGVtZW50cykucGlwZShcbiAgICAgICAgICAgIG1hcCgoaW1nOiBIVE1MSW1hZ2VFbGVtZW50LCBpKSA9PiB7XG4gICAgICAgICAgICAgIC8vIEFkZCBjbGljayBldmVudCB0byB0aGUgaW1hZ2VcbiAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoaW1nLCAnY3Vyc29yJywgJ3BvaW50ZXInKTtcbiAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0UHJvcGVydHkoaW1nLCAnb25jbGljaycsICgpID0+IHRoaXMuX2xpZ2h0Ym94Lm9wZW4oaSwgdGhpcy5nYWxsZXJpemUpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGltZztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFwKChpbWc6IEhUTUxJbWFnZUVsZW1lbnQpID0+IGltYWdlcy5wdXNoKG5ldyBJbWFnZUl0ZW0oaW1nLnNyYywgaW1nLnNyYykpKSxcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IGdhbGxlcnlSZWYubG9hZChpbWFnZXMpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKS5zdWJzY3JpYmUoKTtcblxuICAgIC8vIE9ic2VydmUgY29udGVudCBjaGFuZ2VzXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKSB7XG4gICAgICB0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gdGhpcy5nYWxsZXJpemVyJC5uZXh0KCkpO1xuICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZ2FsbGVyaXplciQuY29tcGxldGUoKTtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG59XG4iXX0=