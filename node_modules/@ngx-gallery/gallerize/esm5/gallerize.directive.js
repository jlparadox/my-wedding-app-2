/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Gallery, ImageItem } from '@ngx-gallery/core';
import { Lightbox } from '@ngx-gallery/lightbox';
import { Subject } from 'rxjs/Subject';
import { from } from 'rxjs/observable/from';
import { empty } from 'rxjs/observable/empty';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { switchMap } from 'rxjs/operators/switchMap';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { finalize } from 'rxjs/operators';
var GallerizeDirective = /** @class */ (function () {
    function GallerizeDirective(_el, _renderer, _lightbox, _gallery, platform) {
        this._el = _el;
        this._renderer = _renderer;
        this._lightbox = _lightbox;
        this._gallery = _gallery;
        this.platform = platform;
        this.gallerizer$ = new Subject();
        /**
         * Add images with specific classes to the gallery
         */
        this.gallerize = 'root';
    }
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * Get galleryRef
         */
        var /** @type {?} */ galleryRef = this._gallery.ref(this.gallerize);
        /**
         * Serialize img classes
         */
        var /** @type {?} */ classes = (this.forClass) ? this.forClass.split(' ').map(function (className) { return '.' + className; }) : '';
        this.gallerizer$.pipe(debounceTime(300), switchMap(function () {
            /**
             * get all img elements from content
             */
            var /** @type {?} */ imageElements = _this._el.nativeElement.querySelectorAll('img' + classes);
            if (imageElements && imageElements.length) {
                var /** @type {?} */ images_1 = [];
                return from(imageElements).pipe(map(function (img, i) {
                    // Add click event to the image
                    // Add click event to the image
                    _this._renderer.setStyle(img, 'cursor', 'pointer');
                    _this._renderer.setProperty(img, 'onclick', function () { return _this._lightbox.open(i, _this.gallerize); });
                    return img;
                }), tap(function (img) { return images_1.push(new ImageItem(img.src, img.src)); }), finalize(function () { return galleryRef.load(images_1); }));
            }
            else {
                return empty();
            }
        })).subscribe();
        // Observe content changes
        if (isPlatformBrowser(this.platform)) {
            this.observer = new MutationObserver(function () { return _this.gallerizer$.next(); });
            this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });
        }
    };
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.gallerizer$.complete();
        if (this.observer) {
            this.observer.disconnect();
        }
    };
    GallerizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[gallerize]'
                },] },
    ];
    /** @nocollapse */
    GallerizeDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: Lightbox, },
        { type: Gallery, },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    GallerizeDirective.propDecorators = {
        "gallerize": [{ type: Input },],
        "forClass": [{ type: Input },],
    };
    return GallerizeDirective;
}());
export { GallerizeDirective };
function GallerizeDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GallerizeDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GallerizeDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GallerizeDirective.propDecorators;
    /** @type {?} */
    GallerizeDirective.prototype.observer;
    /** @type {?} */
    GallerizeDirective.prototype.gallerizer$;
    /**
     * Add images with specific classes to the gallery
     * @type {?}
     */
    GallerizeDirective.prototype.gallerize;
    /** @type {?} */
    GallerizeDirective.prototype.forClass;
    /** @type {?} */
    GallerizeDirective.prototype._el;
    /** @type {?} */
    GallerizeDirective.prototype._renderer;
    /** @type {?} */
    GallerizeDirective.prototype._lightbox;
    /** @type {?} */
    GallerizeDirective.prototype._gallery;
    /** @type {?} */
    GallerizeDirective.prototype.platform;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZ2FsbGVyeS9nYWxsZXJpemUvIiwic291cmNlcyI6WyJnYWxsZXJpemUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELE9BQU8sRUFBRSxPQUFPLEVBQWUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWpELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztJQWF4Qyw0QkFBb0IsR0FBZSxFQUNmLFdBQ0EsV0FDQSxVQUNxQjtRQUpyQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsY0FBUyxHQUFULFNBQVM7UUFDVCxjQUFTLEdBQVQsU0FBUztRQUNULGFBQVEsR0FBUixRQUFRO1FBQ2EsYUFBUSxHQUFSLFFBQVE7MkJBVG5DLElBQUksT0FBTyxFQUFFOzs7O3lC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O2dCQUloQyxRQUFRO2dCQURSLE9BQU87NkNBMkJELE1BQU0sU0FBQyxXQUFXOzs7OEJBUDlCLEtBQUs7NkJBQ0wsS0FBSzs7NkJBeEJSOztTQWtCYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95LCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEdhbGxlcnksIEdhbGxlcnlJdGVtLCBJbWFnZUl0ZW0gfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XG5pbXBvcnQgeyBMaWdodGJveCB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9saWdodGJveCc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL21hcCc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy90YXAnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvc3dpdGNoTWFwJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL2RlYm91bmNlVGltZSc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2dhbGxlcml6ZV0nXG59KVxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBvYnNlcnZlcjogYW55O1xuICBnYWxsZXJpemVyJCA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKiBBZGQgaW1hZ2VzIHdpdGggc3BlY2lmaWMgY2xhc3NlcyB0byB0aGUgZ2FsbGVyeSAqL1xuICBASW5wdXQoKSBnYWxsZXJpemUgPSAncm9vdCc7XG4gIEBJbnB1dCgpIGZvckNsYXNzOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2xpZ2h0Ym94OiBMaWdodGJveCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfZ2FsbGVyeTogR2FsbGVyeSxcbiAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIC8qKiBHZXQgZ2FsbGVyeVJlZiAqL1xuICAgIGNvbnN0IGdhbGxlcnlSZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLmdhbGxlcml6ZSk7XG5cbiAgICAvKiogU2VyaWFsaXplIGltZyBjbGFzc2VzICovXG4gICAgY29uc3QgY2xhc3NlcyA9ICh0aGlzLmZvckNsYXNzKSA/IHRoaXMuZm9yQ2xhc3Muc3BsaXQoJyAnKS5tYXAoKGNsYXNzTmFtZSkgPT4gJy4nICsgY2xhc3NOYW1lKSA6ICcnO1xuXG4gICAgdGhpcy5nYWxsZXJpemVyJC5waXBlKFxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuXG4gICAgICAgIC8qKiBnZXQgYWxsIGltZyBlbGVtZW50cyBmcm9tIGNvbnRlbnQgKi9cbiAgICAgICAgY29uc3QgaW1hZ2VFbGVtZW50cyA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJyArIGNsYXNzZXMpO1xuXG4gICAgICAgIGlmIChpbWFnZUVsZW1lbnRzICYmIGltYWdlRWxlbWVudHMubGVuZ3RoKSB7XG5cbiAgICAgICAgICBjb25zdCBpbWFnZXM6IEdhbGxlcnlJdGVtW10gPSBbXTtcblxuICAgICAgICAgIHJldHVybiBmcm9tKGltYWdlRWxlbWVudHMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGltZzogSFRNTEltYWdlRWxlbWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgICAvLyBBZGQgY2xpY2sgZXZlbnQgdG8gdGhlIGltYWdlXG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGltZywgJ2N1cnNvcicsICdwb2ludGVyJyk7XG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KGltZywgJ29uY2xpY2snLCAoKSA9PiB0aGlzLl9saWdodGJveC5vcGVuKGksIHRoaXMuZ2FsbGVyaXplKSk7XG4gICAgICAgICAgICAgIHJldHVybiBpbWc7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhcCgoaW1nOiBIVE1MSW1hZ2VFbGVtZW50KSA9PiBpbWFnZXMucHVzaChuZXcgSW1hZ2VJdGVtKGltZy5zcmMsIGltZy5zcmMpKSksXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiBnYWxsZXJ5UmVmLmxvYWQoaW1hZ2VzKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICkuc3Vic2NyaWJlKCk7XG5cbiAgICAvLyBPYnNlcnZlIGNvbnRlbnQgY2hhbmdlc1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkge1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuZ2FsbGVyaXplciQubmV4dCgpKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmdhbGxlcml6ZXIkLmNvbXBsZXRlKCk7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfVxufVxuIl19