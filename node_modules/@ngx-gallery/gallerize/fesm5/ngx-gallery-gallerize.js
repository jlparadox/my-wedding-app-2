import { Directive, ElementRef, Renderer2, Input, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { Gallery, ImageItem, GalleryModule } from '@ngx-gallery/core';
import { Lightbox, LightboxModule } from '@ngx-gallery/lightbox';
import { Subject } from 'rxjs/Subject';
import { from } from 'rxjs/observable/from';
import { empty } from 'rxjs/observable/empty';
import { map } from 'rxjs/operators/map';
import { tap } from 'rxjs/operators/tap';
import { switchMap } from 'rxjs/operators/switchMap';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GallerizeDirective = /** @class */ (function () {
    function GallerizeDirective(_el, _renderer, _lightbox, _gallery, platform) {
        this._el = _el;
        this._renderer = _renderer;
        this._lightbox = _lightbox;
        this._gallery = _gallery;
        this.platform = platform;
        this.gallerizer$ = new Subject();
        /**
         * Add images with specific classes to the gallery
         */
        this.gallerize = 'root';
    }
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * Get galleryRef
         */
        var /** @type {?} */ galleryRef = this._gallery.ref(this.gallerize);
        /**
         * Serialize img classes
         */
        var /** @type {?} */ classes = (this.forClass) ? this.forClass.split(' ').map(function (className) { return '.' + className; }) : '';
        this.gallerizer$.pipe(debounceTime(300), switchMap(function () {
            /**
             * get all img elements from content
             */
            var /** @type {?} */ imageElements = _this._el.nativeElement.querySelectorAll('img' + classes);
            if (imageElements && imageElements.length) {
                var /** @type {?} */ images_1 = [];
                return from(imageElements).pipe(map(function (img, i) {
                    // Add click event to the image
                    // Add click event to the image
                    _this._renderer.setStyle(img, 'cursor', 'pointer');
                    _this._renderer.setProperty(img, 'onclick', function () { return _this._lightbox.open(i, _this.gallerize); });
                    return img;
                }), tap(function (img) { return images_1.push(new ImageItem(img.src, img.src)); }), finalize(function () { return galleryRef.load(images_1); }));
            }
            else {
                return empty();
            }
        })).subscribe();
        // Observe content changes
        if (isPlatformBrowser(this.platform)) {
            this.observer = new MutationObserver(function () { return _this.gallerizer$.next(); });
            this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });
        }
    };
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.gallerizer$.complete();
        if (this.observer) {
            this.observer.disconnect();
        }
    };
    GallerizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[gallerize]'
                },] },
    ];
    /** @nocollapse */
    GallerizeDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: Lightbox, },
        { type: Gallery, },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    GallerizeDirective.propDecorators = {
        "gallerize": [{ type: Input },],
        "forClass": [{ type: Input },],
    };
    return GallerizeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GallerizeModule = /** @class */ (function () {
    function GallerizeModule() {
    }
    GallerizeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        GalleryModule,
                        LightboxModule
                    ],
                    declarations: [GallerizeDirective],
                    exports: [GallerizeDirective]
                },] },
    ];
    /** @nocollapse */
    GallerizeModule.ctorParameters = function () { return []; };
    return GallerizeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { GallerizeDirective, GallerizeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktZ2FsbGVyaXplLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWdhbGxlcnkvZ2FsbGVyaXplL2dhbGxlcml6ZS5kaXJlY3RpdmUudHMiLCJuZzovL0BuZ3gtZ2FsbGVyeS9nYWxsZXJpemUvZ2FsbGVyaXplLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95LCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEdhbGxlcnksIEdhbGxlcnlJdGVtLCBJbWFnZUl0ZW0gfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XG5pbXBvcnQgeyBMaWdodGJveCB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9saWdodGJveCc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL21hcCc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy90YXAnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvc3dpdGNoTWFwJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL2RlYm91bmNlVGltZSc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2dhbGxlcml6ZV0nXG59KVxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBvYnNlcnZlcjogYW55O1xuICBnYWxsZXJpemVyJCA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKiBBZGQgaW1hZ2VzIHdpdGggc3BlY2lmaWMgY2xhc3NlcyB0byB0aGUgZ2FsbGVyeSAqL1xuICBASW5wdXQoKSBnYWxsZXJpemUgPSAncm9vdCc7XG4gIEBJbnB1dCgpIGZvckNsYXNzOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2xpZ2h0Ym94OiBMaWdodGJveCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfZ2FsbGVyeTogR2FsbGVyeSxcbiAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIC8qKiBHZXQgZ2FsbGVyeVJlZiAqL1xuICAgIGNvbnN0IGdhbGxlcnlSZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLmdhbGxlcml6ZSk7XG5cbiAgICAvKiogU2VyaWFsaXplIGltZyBjbGFzc2VzICovXG4gICAgY29uc3QgY2xhc3NlcyA9ICh0aGlzLmZvckNsYXNzKSA/IHRoaXMuZm9yQ2xhc3Muc3BsaXQoJyAnKS5tYXAoKGNsYXNzTmFtZSkgPT4gJy4nICsgY2xhc3NOYW1lKSA6ICcnO1xuXG4gICAgdGhpcy5nYWxsZXJpemVyJC5waXBlKFxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuXG4gICAgICAgIC8qKiBnZXQgYWxsIGltZyBlbGVtZW50cyBmcm9tIGNvbnRlbnQgKi9cbiAgICAgICAgY29uc3QgaW1hZ2VFbGVtZW50cyA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJyArIGNsYXNzZXMpO1xuXG4gICAgICAgIGlmIChpbWFnZUVsZW1lbnRzICYmIGltYWdlRWxlbWVudHMubGVuZ3RoKSB7XG5cbiAgICAgICAgICBjb25zdCBpbWFnZXM6IEdhbGxlcnlJdGVtW10gPSBbXTtcblxuICAgICAgICAgIHJldHVybiBmcm9tKGltYWdlRWxlbWVudHMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGltZzogSFRNTEltYWdlRWxlbWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgICAvLyBBZGQgY2xpY2sgZXZlbnQgdG8gdGhlIGltYWdlXG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGltZywgJ2N1cnNvcicsICdwb2ludGVyJyk7XG4gICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KGltZywgJ29uY2xpY2snLCAoKSA9PiB0aGlzLl9saWdodGJveC5vcGVuKGksIHRoaXMuZ2FsbGVyaXplKSk7XG4gICAgICAgICAgICAgIHJldHVybiBpbWc7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhcCgoaW1nOiBIVE1MSW1hZ2VFbGVtZW50KSA9PiBpbWFnZXMucHVzaChuZXcgSW1hZ2VJdGVtKGltZy5zcmMsIGltZy5zcmMpKSksXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiBnYWxsZXJ5UmVmLmxvYWQoaW1hZ2VzKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICkuc3Vic2NyaWJlKCk7XG5cbiAgICAvLyBPYnNlcnZlIGNvbnRlbnQgY2hhbmdlc1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkge1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuZ2FsbGVyaXplciQubmV4dCgpKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmdhbGxlcml6ZXIkLmNvbXBsZXRlKCk7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgR2FsbGVyeU1vZHVsZSB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9jb3JlJztcclxuaW1wb3J0IHsgTGlnaHRib3hNb2R1bGUgfSBmcm9tICdAbmd4LWdhbGxlcnkvbGlnaHRib3gnO1xyXG5pbXBvcnQgeyBHYWxsZXJpemVEaXJlY3RpdmUgfSBmcm9tICcuL2dhbGxlcml6ZS5kaXJlY3RpdmUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBHYWxsZXJ5TW9kdWxlLFxyXG4gICAgTGlnaHRib3hNb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW0dhbGxlcml6ZURpcmVjdGl2ZV0sXHJcbiAgZXhwb3J0czogW0dhbGxlcml6ZURpcmVjdGl2ZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZU1vZHVsZSB7XHJcblxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0lBMEJFLDRCQUFvQixHQUFlLEVBQ2YsV0FDQSxXQUNBLFVBQ3FCO1FBSnJCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixjQUFTLEdBQVQsU0FBUztRQUNULGNBQVMsR0FB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