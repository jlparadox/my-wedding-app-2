(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@ngx-gallery/core'), require('@ngx-gallery/lightbox'), require('rxjs/Subject'), require('rxjs/observable/from'), require('rxjs/observable/empty'), require('rxjs/operators/map'), require('rxjs/operators/tap'), require('rxjs/operators/switchMap'), require('rxjs/operators/debounceTime'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-gallery/gallerize', ['exports', '@angular/core', '@angular/common', '@ngx-gallery/core', '@ngx-gallery/lightbox', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/empty', 'rxjs/operators/map', 'rxjs/operators/tap', 'rxjs/operators/switchMap', 'rxjs/operators/debounceTime', 'rxjs/operators'], factory) :
    (factory((global['ngx-gallery'] = global['ngx-gallery'] || {}, global['ngx-gallery'].gallerize = {}),global.ng.core,global.ng.common,null,null,global.rxjs.Subject,global.rxjs['observable/from'],global.rxjs['observable/empty'],global.rxjs['operators/map'],global.rxjs['operators/tap'],global.rxjs['operators/switchMap'],global.rxjs['operators/debounceTime'],global.rxjs.operators));
}(this, (function (exports,core,common,core$1,lightbox,Subject,from,empty,map,tap,switchMap,debounceTime,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GallerizeDirective = (function () {
        function GallerizeDirective(_el, _renderer, _lightbox, _gallery, platform) {
            this._el = _el;
            this._renderer = _renderer;
            this._lightbox = _lightbox;
            this._gallery = _gallery;
            this.platform = platform;
            this.gallerizer$ = new Subject.Subject();
            /**
             * Add images with specific classes to the gallery
             */
            this.gallerize = 'root';
        }
        /**
         * @return {?}
         */
        GallerizeDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /**
                 * Get galleryRef
                 */
                var /** @type {?} */ galleryRef = this._gallery.ref(this.gallerize);
                /**
                 * Serialize img classes
                 */
                var /** @type {?} */ classes = (this.forClass) ? this.forClass.split(' ').map(function (className) { return '.' + className; }) : '';
                this.gallerizer$.pipe(debounceTime.debounceTime(300), switchMap.switchMap(function () {
                    /**
                     * get all img elements from content
                     */
                    var /** @type {?} */ imageElements = _this._el.nativeElement.querySelectorAll('img' + classes);
                    if (imageElements && imageElements.length) {
                        var /** @type {?} */ images_1 = [];
                        return from.from(imageElements).pipe(map.map(function (img, i) {
                            // Add click event to the image
                            // Add click event to the image
                            _this._renderer.setStyle(img, 'cursor', 'pointer');
                            _this._renderer.setProperty(img, 'onclick', function () { return _this._lightbox.open(i, _this.gallerize); });
                            return img;
                        }), tap.tap(function (img) { return images_1.push(new core$1.ImageItem(img.src, img.src)); }), operators.finalize(function () { return galleryRef.load(images_1); }));
                    }
                    else {
                        return empty.empty();
                    }
                })).subscribe();
                // Observe content changes
                if (common.isPlatformBrowser(this.platform)) {
                    this.observer = new MutationObserver(function () { return _this.gallerizer$.next(); });
                    this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });
                }
            };
        /**
         * @return {?}
         */
        GallerizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.gallerizer$.complete();
                if (this.observer) {
                    this.observer.disconnect();
                }
            };
        GallerizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gallerize]'
                    },] },
        ];
        /** @nocollapse */
        GallerizeDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
                { type: lightbox.Lightbox, },
                { type: core$1.Gallery, },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
            ];
        };
        GallerizeDirective.propDecorators = {
            "gallerize": [{ type: core.Input },],
            "forClass": [{ type: core.Input },],
        };
        return GallerizeDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GallerizeModule = (function () {
        function GallerizeModule() {
        }
        GallerizeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            core$1.GalleryModule,
                            lightbox.LightboxModule
                        ],
                        declarations: [GallerizeDirective],
                        exports: [GallerizeDirective]
                    },] },
        ];
        /** @nocollapse */
        GallerizeModule.ctorParameters = function () { return []; };
        return GallerizeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.GallerizeDirective = GallerizeDirective;
    exports.GallerizeModule = GallerizeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktZ2FsbGVyaXplLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1nYWxsZXJ5L2dhbGxlcml6ZS9nYWxsZXJpemUuZGlyZWN0aXZlLnRzIiwibmc6Ly9Abmd4LWdhbGxlcnkvZ2FsbGVyaXplL2dhbGxlcml6ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBHYWxsZXJ5LCBHYWxsZXJ5SXRlbSwgSW1hZ2VJdGVtIH0gZnJvbSAnQG5neC1nYWxsZXJ5L2NvcmUnO1xuaW1wb3J0IHsgTGlnaHRib3ggfSBmcm9tICdAbmd4LWdhbGxlcnkvbGlnaHRib3gnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICdyeGpzL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9lbXB0eSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycy9tYXAnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvdGFwJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL3N3aXRjaE1hcCc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tnYWxsZXJpemVdJ1xufSlcbmV4cG9ydCBjbGFzcyBHYWxsZXJpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgb2JzZXJ2ZXI6IGFueTtcbiAgZ2FsbGVyaXplciQgPSBuZXcgU3ViamVjdCgpO1xuICAvKiogQWRkIGltYWdlcyB3aXRoIHNwZWNpZmljIGNsYXNzZXMgdG8gdGhlIGdhbGxlcnkgKi9cbiAgQElucHV0KCkgZ2FsbGVyaXplID0gJ3Jvb3QnO1xuICBASW5wdXQoKSBmb3JDbGFzczogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBwcml2YXRlIF9saWdodGJveDogTGlnaHRib3gsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2dhbGxlcnk6IEdhbGxlcnksXG4gICAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm06IE9iamVjdCkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG5cbiAgICAvKiogR2V0IGdhbGxlcnlSZWYgKi9cbiAgICBjb25zdCBnYWxsZXJ5UmVmID0gdGhpcy5fZ2FsbGVyeS5yZWYodGhpcy5nYWxsZXJpemUpO1xuXG4gICAgLyoqIFNlcmlhbGl6ZSBpbWcgY2xhc3NlcyAqL1xuICAgIGNvbnN0IGNsYXNzZXMgPSAodGhpcy5mb3JDbGFzcykgPyB0aGlzLmZvckNsYXNzLnNwbGl0KCcgJykubWFwKChjbGFzc05hbWUpID0+ICcuJyArIGNsYXNzTmFtZSkgOiAnJztcblxuICAgIHRoaXMuZ2FsbGVyaXplciQucGlwZShcbiAgICAgIGRlYm91bmNlVGltZSgzMDApLFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcblxuICAgICAgICAvKiogZ2V0IGFsbCBpbWcgZWxlbWVudHMgZnJvbSBjb250ZW50ICovXG4gICAgICAgIGNvbnN0IGltYWdlRWxlbWVudHMgPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycgKyBjbGFzc2VzKTtcblxuICAgICAgICBpZiAoaW1hZ2VFbGVtZW50cyAmJiBpbWFnZUVsZW1lbnRzLmxlbmd0aCkge1xuXG4gICAgICAgICAgY29uc3QgaW1hZ2VzOiBHYWxsZXJ5SXRlbVtdID0gW107XG5cbiAgICAgICAgICByZXR1cm4gZnJvbShpbWFnZUVsZW1lbnRzKS5waXBlKFxuICAgICAgICAgICAgbWFwKChpbWc6IEhUTUxJbWFnZUVsZW1lbnQsIGkpID0+IHtcbiAgICAgICAgICAgICAgLy8gQWRkIGNsaWNrIGV2ZW50IHRvIHRoZSBpbWFnZVxuICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShpbWcsICdjdXJzb3InLCAncG9pbnRlcicpO1xuICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRQcm9wZXJ0eShpbWcsICdvbmNsaWNrJywgKCkgPT4gdGhpcy5fbGlnaHRib3gub3BlbihpLCB0aGlzLmdhbGxlcml6ZSkpO1xuICAgICAgICAgICAgICByZXR1cm4gaW1nO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0YXAoKGltZzogSFRNTEltYWdlRWxlbWVudCkgPT4gaW1hZ2VzLnB1c2gobmV3IEltYWdlSXRlbShpbWcuc3JjLCBpbWcuc3JjKSkpLFxuICAgICAgICAgICAgZmluYWxpemUoKCkgPT4gZ2FsbGVyeVJlZi5sb2FkKGltYWdlcykpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApLnN1YnNjcmliZSgpO1xuXG4gICAgLy8gT2JzZXJ2ZSBjb250ZW50IGNoYW5nZXNcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybSkpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB0aGlzLmdhbGxlcml6ZXIkLm5leHQoKSk7XG4gICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5fZWwubmF0aXZlRWxlbWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5nYWxsZXJpemVyJC5jb21wbGV0ZSgpO1xuICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEdhbGxlcnlNb2R1bGUgfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XHJcbmltcG9ydCB7IExpZ2h0Ym94TW9kdWxlIH0gZnJvbSAnQG5neC1nYWxsZXJ5L2xpZ2h0Ym94JztcclxuaW1wb3J0IHsgR2FsbGVyaXplRGlyZWN0aXZlIH0gZnJvbSAnLi9nYWxsZXJpemUuZGlyZWN0aXZlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgR2FsbGVyeU1vZHVsZSxcclxuICAgIExpZ2h0Ym94TW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtHYWxsZXJpemVEaXJlY3RpdmVdLFxyXG4gIGV4cG9ydHM6IFtHYWxsZXJpemVEaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJpemVNb2R1bGUge1xyXG5cclxufVxyXG4iXSwibmFtZXMiOlsiU3ViamVjdCIsImRlYm91bmNlVGltZSIsInN3aXRjaE1hcCIsImZyb20iLCJtYXAiLCJ0YXAiLCJJbWFnZUl0ZW0iLCJmaW5hbGl6ZSIsImVtcHR5IiwiaXNQbGF0Zm9ybUJyb3dzZXIiLCJEaXJlY3RpdmUiLCJFbGVtZW50UmVmIiwiUmVuZGVyZXIyIiwiTGlnaHRib3giLCJHYWxsZXJ5IiwiSW5qZWN0IiwiUExBVEZPUk1fSUQiLCJJbnB1dCIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIiwiR2FsbGVyeU1vZHVsZSIsIkxpZ2h0Ym94TW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUEwQkUsNEJBQW9CLEdBQWUsRUFDZixXQUNBLFdBQ0EsVUFDcUI7WUFKckIsUUFBRyxHQUFILEdBQUcsQ0FBWTtZQUNmLGNBQVMsR0FBVCxTQUFTO1lBQ1QsY0FBUyxHQUFULFNBQVM7WUFDVCxhQUFRLEdBQVIsUUFBUTtZQUNhLGFBQVEsR0FBUixRQUFROytCQVRuQyxJQUFJQSxlQUFPLEVBQUU7Ozs7NkJBRU4sTUFBTTtTQVExQjs7OztRQUVELHFDQUFROzs7WUFBUjtnQkFBQSxpQkF3Q0M7Ozs7Z0JBckNDLHFCQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Z0JBR3JELHFCQUFNLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsU0FBUyxJQUFLLE9BQUEsR0FBRyxHQUFHLFNBQVMsR0FBQSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUVwRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDbkJDLHlCQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCQyxtQkFBUyxDQUFDOzs7O29CQUdSLHFCQUFNLGFBQWEsR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUM7b0JBRS9FLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7d0JBRXpDLHFCQUFNLFFBQU0sR0FBa0IsRUFBRSxDQUFDO3dCQUVqQyxPQUFPQyxTQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM3QkMsT0FBRyxDQUFDLFVBQUMsR0FBcUIsRUFBRSxDQUFDOzs7NEJBRTNCLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7NEJBQ2xELEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUEsQ0FBQyxDQUFDOzRCQUN6RixPQUFPLEdBQUcsQ0FBQzt5QkFDWixDQUFDLEVBQ0ZDLE9BQUcsQ0FBQyxVQUFDLEdBQXFCLElBQUssT0FBQSxRQUFNLENBQUMsSUFBSSxDQUFDLElBQUlDLGdCQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQSxDQUFDLEVBQzVFQyxrQkFBUSxDQUFDLGNBQU0sT0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxHQUFBLENBQUMsQ0FDeEMsQ0FBQztxQkFDSDt5QkFBTTt3QkFDTCxPQUFPQyxXQUFLLEVBQUUsQ0FBQztxQkFDaEI7aUJBQ0YsQ0FBQyxDQUNILENBQUMsU0FBUyxFQUFFLENBQUM7O2dCQUdkLElBQUlDLHdCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFBLENBQUMsQ0FBQztvQkFDcEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUNuRjthQUNGOzs7O1FBRUQsd0NBQVc7OztZQUFYO2dCQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztpQkFDNUI7YUFDRjs7b0JBakVGQyxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLGFBQWE7cUJBQ3hCOzs7Ozt3QkFqQm1CQyxlQUFVO3dCQUFFQyxjQUFTO3dCQUloQ0MsaUJBQVE7d0JBRFJDLGNBQU87cURBMkJEQyxXQUFNLFNBQUNDLGdCQUFXOzs7O2tDQVA5QkMsVUFBSztpQ0FDTEEsVUFBSzs7aUNBeEJSOzs7Ozs7O0FDQUE7Ozs7b0JBTUNDLGFBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUU7NEJBQ1BDLG1CQUFZOzRCQUNaQyxvQkFBYTs0QkFDYkMsdUJBQWM7eUJBQ2Y7d0JBQ0QsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7d0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO3FCQUM5Qjs7Ozs4QkFkRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9