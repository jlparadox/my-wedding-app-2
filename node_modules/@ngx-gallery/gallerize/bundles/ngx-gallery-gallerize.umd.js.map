{"version":3,"file":"ngx-gallery-gallerize.umd.js.map","sources":["ng://@ngx-gallery/gallerize/gallerize.directive.ts","ng://@ngx-gallery/gallerize/gallerize.module.ts"],"sourcesContent":["import { Directive, ElementRef, Renderer2, Input, OnInit, OnDestroy, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Gallery, GalleryItem, ImageItem } from '@ngx-gallery/core';\nimport { Lightbox } from '@ngx-gallery/lightbox';\n\nimport { Subject } from 'rxjs/Subject';\nimport { from } from 'rxjs/observable/from';\nimport { empty } from 'rxjs/observable/empty';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { finalize } from 'rxjs/operators';\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  observer: any;\n  gallerizer$ = new Subject();\n  /** Add images with specific classes to the gallery */\n  @Input() gallerize = 'root';\n  @Input() forClass: string;\n\n  constructor(private _el: ElementRef,\n              private _renderer: Renderer2,\n              private _lightbox: Lightbox,\n              private _gallery: Gallery,\n              @Inject(PLATFORM_ID) private platform: Object) {\n  }\n\n  ngOnInit() {\n\n    /** Get galleryRef */\n    const galleryRef = this._gallery.ref(this.gallerize);\n\n    /** Serialize img classes */\n    const classes = (this.forClass) ? this.forClass.split(' ').map((className) => '.' + className) : '';\n\n    this.gallerizer$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll('img' + classes);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((img: HTMLImageElement, i) => {\n              // Add click event to the image\n              this._renderer.setStyle(img, 'cursor', 'pointer');\n              this._renderer.setProperty(img, 'onclick', () => this._lightbox.open(i, this.gallerize));\n              return img;\n            }),\n            tap((img: HTMLImageElement) => images.push(new ImageItem(img.src, img.src))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return empty();\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    if (isPlatformBrowser(this.platform)) {\n      this.observer = new MutationObserver(() => this.gallerizer$.next());\n      this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });\n    }\n  }\n\n  ngOnDestroy() {\n    this.gallerizer$.complete();\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { LightboxModule } from '@ngx-gallery/lightbox';\r\nimport { GallerizeDirective } from './gallerize.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    GalleryModule,\r\n    LightboxModule\r\n  ],\r\n  declarations: [GallerizeDirective],\r\n  exports: [GallerizeDirective]\r\n})\r\nexport class GallerizeModule {\r\n\r\n}\r\n"],"names":["Subject","debounceTime","switchMap","from","map","tap","ImageItem","finalize","empty","isPlatformBrowser","Directive","ElementRef","Renderer2","Lightbox","Gallery","Inject","PLATFORM_ID","Input","NgModule","CommonModule","GalleryModule","LightboxModule"],"mappings":"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"}
