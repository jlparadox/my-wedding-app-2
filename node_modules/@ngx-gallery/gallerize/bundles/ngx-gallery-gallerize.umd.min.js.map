{"version":3,"sources":["ng://@ngx-gallery/gallerize/gallerize.directive.ts","ng://@ngx-gallery/gallerize/gallerize.module.ts"],"names":["GallerizeDirective","_el","_renderer","_lightbox","_gallery","platform","this","Subject","prototype","ngOnInit","_this","galleryRef","ref","gallerize","classes","forClass","split","map","className","gallerizer$","pipe","debounceTime","switchMap","imageElements","nativeElement","querySelectorAll","length","images_1","from","img","i","setStyle","setProperty","open","tap","push","ImageItem","src","finalize","load","empty","subscribe","isPlatformBrowser","observer","MutationObserver","next","observe","childList","subtree","ngOnDestroy","complete","disconnect","Directive","args","selector","ElementRef","Renderer2","Lightbox","Gallery","Inject","PLATFORM_ID","Input","GallerizeModule","NgModule","imports","CommonModule","GalleryModule","LightboxModule","declarations","exports"],"mappings":"onCAAA,IAAAA,EAAA,WA0BE,SAAAA,EAAoBC,EACAC,EACAC,EACAC,EACqBC,GAJrBC,KAAAL,IAAAA,EACAK,KAAAJ,UAAAA,EACAI,KAAAH,UAAAA,EACAG,KAAAF,SAAAA,EACqBE,KAAAD,SAAAA,mBAT3B,IAAIE,EAAAA,uBAEG,cAUrBP,EAAAQ,UAAAC,SAAA,WAAA,IAAAC,EAAAJ,KAGQK,EAAaL,KAAKF,SAASQ,IAAIN,KAAKO,WAGpCC,EAAWR,KAAa,SAAIA,KAAKS,SAASC,MAAM,KAAKC,IAAI,SAACC,GAAc,MAAA,IAAMA,IAAa,GAEjGZ,KAAKa,YAAYC,KACfC,EAAAA,aAAa,KACbC,EAAAA,UAAU,WAGR,IAAMC,EAAgBb,EAAKT,IAAIuB,cAAcC,iBAAiB,MAAQX,GAEtE,GAAIS,GAAiBA,EAAcG,OAAQ,CAEzC,IAAMC,EAAwB,GAE9B,OAAOC,EAAAA,KAAKL,GAAeH,KACzBH,EAAAA,IAAI,SAACY,EAAuBC,GAI1B,OAFApB,EAAKR,UAAU6B,SAASF,EAAK,SAAU,WACvCnB,EAAKR,UAAU8B,YAAYH,EAAK,UAAW,WAAM,OAAAnB,EAAKP,UAAU8B,KAAKH,EAAGpB,EAAKG,aACtEgB,IAETK,EAAAA,IAAI,SAACL,GAA0B,OAAAF,EAAOQ,KAAK,IAAIC,EAAAA,UAAUP,EAAIQ,IAAKR,EAAIQ,QACtEC,EAAAA,SAAS,WAAM,OAAA3B,EAAW4B,KAAKZ,MAGjC,OAAOa,EAAAA,WAGXC,YAGEC,EAAAA,kBAAkBpC,KAAKD,YACzBC,KAAKqC,SAAW,IAAIC,iBAAiB,WAAM,OAAAlC,EAAKS,YAAY0B,SAC5DvC,KAAKqC,SAASG,QAAQxC,KAAKL,IAAIuB,cAAe,CAAEuB,WAAW,EAAMC,SAAS,MAI9EhD,EAAAQ,UAAAyC,YAAA,WACE3C,KAAKa,YAAY+B,WACb5C,KAAKqC,UACPrC,KAAKqC,SAASQ,kCA/DnBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2DAhBQC,EAAAA,kBAAYC,EAAAA,iBAIvBC,EAAAA,gBADAC,EAAAA,wCA2BMC,EAAAA,OAAMN,KAAA,CAACO,EAAAA,qDAPnBC,EAAAA,wBACAA,EAAAA,WAxBH,GCAAC,EAAA,oDAMCC,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,gBAEFC,aAAc,CAACpE,GACfqE,QAAS,CAACrE,+CAbZ","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, OnInit, OnDestroy, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Gallery, GalleryItem, ImageItem } from '@ngx-gallery/core';\nimport { Lightbox } from '@ngx-gallery/lightbox';\n\nimport { Subject } from 'rxjs/Subject';\nimport { from } from 'rxjs/observable/from';\nimport { empty } from 'rxjs/observable/empty';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { finalize } from 'rxjs/operators';\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  observer: any;\n  gallerizer$ = new Subject();\n  /** Add images with specific classes to the gallery */\n  @Input() gallerize = 'root';\n  @Input() forClass: string;\n\n  constructor(private _el: ElementRef,\n              private _renderer: Renderer2,\n              private _lightbox: Lightbox,\n              private _gallery: Gallery,\n              @Inject(PLATFORM_ID) private platform: Object) {\n  }\n\n  ngOnInit() {\n\n    /** Get galleryRef */\n    const galleryRef = this._gallery.ref(this.gallerize);\n\n    /** Serialize img classes */\n    const classes = (this.forClass) ? this.forClass.split(' ').map((className) => '.' + className) : '';\n\n    this.gallerizer$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll('img' + classes);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((img: HTMLImageElement, i) => {\n              // Add click event to the image\n              this._renderer.setStyle(img, 'cursor', 'pointer');\n              this._renderer.setProperty(img, 'onclick', () => this._lightbox.open(i, this.gallerize));\n              return img;\n            }),\n            tap((img: HTMLImageElement) => images.push(new ImageItem(img.src, img.src))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return empty();\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    if (isPlatformBrowser(this.platform)) {\n      this.observer = new MutationObserver(() => this.gallerizer$.next());\n      this.observer.observe(this._el.nativeElement, { childList: true, subtree: true });\n    }\n  }\n\n  ngOnDestroy() {\n    this.gallerizer$.complete();\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { LightboxModule } from '@ngx-gallery/lightbox';\r\nimport { GallerizeDirective } from './gallerize.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    GalleryModule,\r\n    LightboxModule\r\n  ],\r\n  declarations: [GallerizeDirective],\r\n  exports: [GallerizeDirective]\r\n})\r\nexport class GallerizeModule {\r\n\r\n}\r\n"]}