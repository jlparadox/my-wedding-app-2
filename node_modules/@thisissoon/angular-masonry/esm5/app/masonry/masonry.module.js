/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { MasonryRef } from './masonry-ref';
import { Masonry } from './masonry-token';
var ɵ0 = MasonryRef;
var /** @type {?} */ defaultProviders = [{ provide: Masonry, useValue: ɵ0 }];
/**
 * A simple lightweight module to use Masonry layout in Angular
 *
 * {\@link https://masonry.desandro.com/}
 *
 */
var MasonryModule = /** @class */ (function () {
    function MasonryModule() {
    }
    /**
     * Specify a static method for root module to ensure providers
     * are only provided once but allows the module to still be imported
     * into other modules without reproviding services.
     *
     * \@memberof MasonryModule
     * @param {?=} providers
     * @return {?}
     */
    MasonryModule.forRoot = /**
     * Specify a static method for root module to ensure providers
     * are only provided once but allows the module to still be imported
     * into other modules without reproviding services.
     *
     * \@memberof MasonryModule
     * @param {?=} providers
     * @return {?}
     */
    function (providers) {
        if (providers === void 0) { providers = defaultProviders; }
        return {
            ngModule: MasonryModule,
            providers: providers
        };
    };
    MasonryModule.decorators = [
        { type: NgModule },
    ];
    return MasonryModule;
}());
export { MasonryModule };
function MasonryModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MasonryModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MasonryModule.ctorParameters;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzb25yeS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGhpc2lzc29vbi9hbmd1bGFyLW1hc29ucnkvIiwic291cmNlcyI6WyJhcHAvbWFzb25yeS9tYXNvbnJ5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7U0FFYyxVQUFVO0FBQWxFLHFCQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsSUFBWSxFQUFFLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlCdEQscUJBQU87Ozs7Ozs7OztjQUNuQixTQUF3QztRQUF4QywwQkFBQSxFQUFBLDRCQUF3QztRQUV4QyxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDOzs7Z0JBZkwsUUFBUTs7d0JBYlQ7O1NBY2EsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNYXNvbnJ5UmVmIH0gZnJvbSAnLi9tYXNvbnJ5LXJlZic7XG5pbXBvcnQgeyBNYXNvbnJ5IH0gZnJvbSAnLi9tYXNvbnJ5LXRva2VuJztcblxuY29uc3QgZGVmYXVsdFByb3ZpZGVycyA9IFt7IHByb3ZpZGU6IE1hc29ucnksIHVzZVZhbHVlOiBNYXNvbnJ5UmVmIH1dO1xuXG4vKipcbiAqIEEgc2ltcGxlIGxpZ2h0d2VpZ2h0IG1vZHVsZSB0byB1c2UgTWFzb25yeSBsYXlvdXQgaW4gQW5ndWxhclxuICpcbiAqIHtAbGluayBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tL31cbiAqXG4gKi9cbkBOZ01vZHVsZSgpXG5leHBvcnQgY2xhc3MgTWFzb25yeU1vZHVsZSB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IGEgc3RhdGljIG1ldGhvZCBmb3Igcm9vdCBtb2R1bGUgdG8gZW5zdXJlIHByb3ZpZGVyc1xuICAgKiBhcmUgb25seSBwcm92aWRlZCBvbmNlIGJ1dCBhbGxvd3MgdGhlIG1vZHVsZSB0byBzdGlsbCBiZSBpbXBvcnRlZFxuICAgKiBpbnRvIG90aGVyIG1vZHVsZXMgd2l0aG91dCByZXByb3ZpZGluZyBzZXJ2aWNlcy5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1hc29ucnlNb2R1bGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChcbiAgICBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBkZWZhdWx0UHJvdmlkZXJzXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWFzb25yeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogcHJvdmlkZXJzXG4gICAgfTtcbiAgfVxufVxuIl19