(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@thisissoon/angular-masonry', ['exports', '@angular/core'], factory) :
    (factory((global.thisissoon = global.thisissoon || {}, global.thisissoon['angular-masonry'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An implemenation of the masonry library to be used
     * as a dummy when running on a server
     * @param {?} element
     * @param {?} options
     * @return {?}
     */
    function MasonryRef(element, options) {
        return {
            layout: function () { return null; },
            destroy: function () { return null; },
            stamp: function () { return null; },
            unstamp: function () { return null; },
            appended: function () { return null; },
            prepended: function () { return null; },
            addItems: function () { return null; },
            remove: function () { return null; },
            on: function () { return null; },
            off: function () { return null; },
            once: function () { return null; },
            reloadItems: function () { return null; },
            getItemElements: function () { return null; }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ Masonry = new core.InjectionToken('Masonry');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ɵ0 = MasonryRef;
    var /** @type {?} */ defaultProviders = [{ provide: Masonry, useValue: ɵ0 }];
    /**
     * A simple lightweight module to use Masonry layout in Angular
     *
     * {\@link https://masonry.desandro.com/}
     *
     */
    var MasonryModule = (function () {
        function MasonryModule() {
        }
        /**
         * Specify a static method for root module to ensure providers
         * are only provided once but allows the module to still be imported
         * into other modules without reproviding services.
         *
         * \@memberof MasonryModule
         * @param {?=} providers
         * @return {?}
         */
        MasonryModule.forRoot = /**
         * Specify a static method for root module to ensure providers
         * are only provided once but allows the module to still be imported
         * into other modules without reproviding services.
         *
         * \@memberof MasonryModule
         * @param {?=} providers
         * @return {?}
         */
            function (providers) {
                if (providers === void 0) {
                    providers = defaultProviders;
                }
                return {
                    ngModule: MasonryModule,
                    providers: providers
                };
            };
        MasonryModule.decorators = [
            { type: core.NgModule },
        ];
        return MasonryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.MasonryRef = MasonryRef;
    exports.Masonry = Masonry;
    exports.MasonryModule = MasonryModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhpc2lzc29vbi1hbmd1bGFyLW1hc29ucnkudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AdGhpc2lzc29vbi9hbmd1bGFyLW1hc29ucnkvYXBwL21hc29ucnkvbWFzb25yeS1yZWYudHMiLCJuZzovL0B0aGlzaXNzb29uL2FuZ3VsYXItbWFzb25yeS9hcHAvbWFzb25yeS9tYXNvbnJ5LXRva2VuLnRzIiwibmc6Ly9AdGhpc2lzc29vbi9hbmd1bGFyLW1hc29ucnkvYXBwL21hc29ucnkvbWFzb25yeS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFzb25yeU9wdGlvbnMgfSBmcm9tICcuL21hc29ucnktb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBNYXNvbnJ5SW5zdGFuY2UgfSBmcm9tICcuL21hc29ucnktaW5zdGFuY2UubW9kZWwnO1xuXG4vKipcbiAqIEFuIGltcGxlbWVuYXRpb24gb2YgdGhlIG1hc29ucnkgbGlicmFyeSB0byBiZSB1c2VkXG4gKiBhcyBhIGR1bW15IHdoZW4gcnVubmluZyBvbiBhIHNlcnZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gTWFzb25yeVJlZihcbiAgZWxlbWVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQsXG4gIG9wdGlvbnM6IE1hc29ucnlPcHRpb25zXG4pOiBNYXNvbnJ5SW5zdGFuY2Uge1xuICByZXR1cm4ge1xuICAgIGxheW91dDogKCkgPT4gbnVsbCxcbiAgICBkZXN0cm95OiAoKSA9PiBudWxsLFxuICAgIHN0YW1wOiAoKSA9PiBudWxsLFxuICAgIHVuc3RhbXA6ICgpID0+IG51bGwsXG4gICAgYXBwZW5kZWQ6ICgpID0+IG51bGwsXG4gICAgcHJlcGVuZGVkOiAoKSA9PiBudWxsLFxuICAgIGFkZEl0ZW1zOiAoKSA9PiBudWxsLFxuICAgIHJlbW92ZTogKCkgPT4gbnVsbCxcbiAgICBvbjogKCkgPT4gbnVsbCxcbiAgICBvZmY6ICgpID0+IG51bGwsXG4gICAgb25jZTogKCkgPT4gbnVsbCxcbiAgICByZWxvYWRJdGVtczogKCkgPT4gbnVsbCxcbiAgICBnZXRJdGVtRWxlbWVudHM6ICgpID0+IG51bGxcbiAgfTtcbn1cbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBNYXNvbnJ5ID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ01hc29ucnknKTtcbiIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNYXNvbnJ5UmVmIH0gZnJvbSAnLi9tYXNvbnJ5LXJlZic7XG5pbXBvcnQgeyBNYXNvbnJ5IH0gZnJvbSAnLi9tYXNvbnJ5LXRva2VuJztcblxuY29uc3QgZGVmYXVsdFByb3ZpZGVycyA9IFt7IHByb3ZpZGU6IE1hc29ucnksIHVzZVZhbHVlOiBNYXNvbnJ5UmVmIH1dO1xuXG4vKipcbiAqIEEgc2ltcGxlIGxpZ2h0d2VpZ2h0IG1vZHVsZSB0byB1c2UgTWFzb25yeSBsYXlvdXQgaW4gQW5ndWxhclxuICpcbiAqIHtAbGluayBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tL31cbiAqXG4gKi9cbkBOZ01vZHVsZSgpXG5leHBvcnQgY2xhc3MgTWFzb25yeU1vZHVsZSB7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IGEgc3RhdGljIG1ldGhvZCBmb3Igcm9vdCBtb2R1bGUgdG8gZW5zdXJlIHByb3ZpZGVyc1xuICAgKiBhcmUgb25seSBwcm92aWRlZCBvbmNlIGJ1dCBhbGxvd3MgdGhlIG1vZHVsZSB0byBzdGlsbCBiZSBpbXBvcnRlZFxuICAgKiBpbnRvIG90aGVyIG1vZHVsZXMgd2l0aG91dCByZXByb3ZpZGluZyBzZXJ2aWNlcy5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1hc29ucnlNb2R1bGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChcbiAgICBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBkZWZhdWx0UHJvdmlkZXJzXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWFzb25yeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogcHJvdmlkZXJzXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkluamVjdGlvblRva2VuIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT0Esd0JBQ0UsT0FBNkIsRUFDN0IsT0FBdUI7UUFFdkIsT0FBTztZQUNMLE1BQU0sRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ2xCLE9BQU8sRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ25CLEtBQUssRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ2pCLE9BQU8sRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ25CLFFBQVEsRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ3BCLFNBQVMsRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ3JCLFFBQVEsRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ3BCLE1BQU0sRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ2xCLEVBQUUsRUFBRSxjQUFNLE9BQUEsSUFBSSxHQUFBO1lBQ2QsR0FBRyxFQUFFLGNBQU0sT0FBQSxJQUFJLEdBQUE7WUFDZixJQUFJLEVBQUUsY0FBTSxPQUFBLElBQUksR0FBQTtZQUNoQixXQUFXLEVBQUUsY0FBTSxPQUFBLElBQUksR0FBQTtZQUN2QixlQUFlLEVBQUUsY0FBTSxPQUFBLElBQUksR0FBQTtTQUM1QixDQUFDO0tBQ0g7Ozs7OztBQzFCRCx5QkFFYSxPQUFPLEdBQUcsSUFBSUEsbUJBQWMsQ0FBUyxTQUFTLENBQUM7Ozs7OztBQ0Y1RCxhQUt3RCxVQUFVO0lBQWxFLHFCQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsSUFBWSxFQUFFLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQWlCdEQscUJBQU87Ozs7Ozs7OztzQkFDbkIsU0FBd0M7Z0JBQXhDLDBCQUFBO29CQUFBLDRCQUF3Qzs7Z0JBRXhDLE9BQU87b0JBQ0wsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFNBQVMsRUFBRSxTQUFTO2lCQUNyQixDQUFDOzs7b0JBZkxDLGFBQVE7OzRCQWJUOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9